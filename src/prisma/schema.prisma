//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "./generated"
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  pollId    String   @map("poll_id")
  userId    String   @map("user_id")
  parentId  String?  @map("parent_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([pollId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}


model Like {
  id        String   @id @default(cuid())
  pollId    String   @map("poll_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId])
  @@index([pollId])
  @@index([userId])
  @@map("likes")
}


model Notification {
  id        String   @id @default(cuid())
  type      String
  userId    String   @map("user_id")
  pollId    String?  @map("poll_id")
  actorId   String?  @map("actor_id")
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations - Fixed missing opposite relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll      Poll?    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  actor     User?    @relation("NotificationActor", fields: [actorId], references: [id])

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}


model Poll {
  id          String    @id @default(cuid())
  question    String
  description String?
  settings    Json?     // Poll settings (private, multiple votes, etc.)
  creatorId   String    @map("creator_id")
  isPublic    Boolean   @default(true) @map("is_public")
  isActive    Boolean   @default(true) @map("is_active")
  closesAt    DateTime? @map("closes_at") // Optional closing time
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  options     PollOption[]
  votes       Vote[]
  likes       Like[]
  comments    Comment[]
  views       PollView[]
  notifications Notification[]

  // Indexes for performance
  @@index([creatorId])
  @@index([isPublic, isActive])
  @@index([createdAt])
  @@index([closesAt])
  @@map("polls")
}


// Add to PollOption model in schema.prisma
model PollOption {
  id          String   @id @default(cuid())
  text        String
  description String?
  image       String?
  order       Int
  pollId      String   @map("poll_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  poll        Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes       Vote[]

  // Indexes
  @@index([pollId])
  @@map("poll_options")
}


model PollView {
  id        String   @id @default(cuid())
  pollId    String   @map("poll_id")
  userId    String?  @map("user_id")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  poll      Poll?    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([pollId])
  @@index([userId])
  @@index([createdAt])
  @@map("poll_views")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations - Added missing opposite relations for Notification and PollView
  accounts      Account[]
  sessions      Session[]
  polls         Poll[]
  votes         Vote[]
  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  pollViews     PollView[] // Added opposite relation for PollView.user
  actorNotifications Notification[] @relation("NotificationActor") // Added opposite relation for Notification.actor

  @@map("users")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Vote {
  id        String   @id @default(cuid())
  pollId    String   @map("poll_id")
  optionId  String   @map("option_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one vote per user per poll (unless poll allows multiple)
  @@unique([pollId, userId])
  @@index([pollId])
  @@index([optionId])
  @@index([userId])
  @@map("votes")
}
