
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PollView` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PollView
 * 
 */
export type PollViewModel = runtime.Types.Result.DefaultSelection<Prisma.$PollViewPayload>

export type AggregatePollView = {
  _count: PollViewCountAggregateOutputType | null
  _min: PollViewMinAggregateOutputType | null
  _max: PollViewMaxAggregateOutputType | null
}

export type PollViewMinAggregateOutputType = {
  id: string | null
  pollId: string | null
  userId: string | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date | null
}

export type PollViewMaxAggregateOutputType = {
  id: string | null
  pollId: string | null
  userId: string | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date | null
}

export type PollViewCountAggregateOutputType = {
  id: number
  pollId: number
  userId: number
  ipAddress: number
  userAgent: number
  createdAt: number
  _all: number
}


export type PollViewMinAggregateInputType = {
  id?: true
  pollId?: true
  userId?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
}

export type PollViewMaxAggregateInputType = {
  id?: true
  pollId?: true
  userId?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
}

export type PollViewCountAggregateInputType = {
  id?: true
  pollId?: true
  userId?: true
  ipAddress?: true
  userAgent?: true
  createdAt?: true
  _all?: true
}

export type PollViewAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PollView to aggregate.
   */
  where?: Prisma.PollViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollViews to fetch.
   */
  orderBy?: Prisma.PollViewOrderByWithRelationInput | Prisma.PollViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PollViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PollViews
  **/
  _count?: true | PollViewCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PollViewMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PollViewMaxAggregateInputType
}

export type GetPollViewAggregateType<T extends PollViewAggregateArgs> = {
      [P in keyof T & keyof AggregatePollView]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePollView[P]>
    : Prisma.GetScalarType<T[P], AggregatePollView[P]>
}




export type PollViewGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PollViewWhereInput
  orderBy?: Prisma.PollViewOrderByWithAggregationInput | Prisma.PollViewOrderByWithAggregationInput[]
  by: Prisma.PollViewScalarFieldEnum[] | Prisma.PollViewScalarFieldEnum
  having?: Prisma.PollViewScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PollViewCountAggregateInputType | true
  _min?: PollViewMinAggregateInputType
  _max?: PollViewMaxAggregateInputType
}

export type PollViewGroupByOutputType = {
  id: string
  pollId: string
  userId: string | null
  ipAddress: string | null
  userAgent: string | null
  createdAt: Date
  _count: PollViewCountAggregateOutputType | null
  _min: PollViewMinAggregateOutputType | null
  _max: PollViewMaxAggregateOutputType | null
}

type GetPollViewGroupByPayload<T extends PollViewGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PollViewGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PollViewGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PollViewGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PollViewGroupByOutputType[P]>
      }
    >
  > 



export type PollViewWhereInput = {
  AND?: Prisma.PollViewWhereInput | Prisma.PollViewWhereInput[]
  OR?: Prisma.PollViewWhereInput[]
  NOT?: Prisma.PollViewWhereInput | Prisma.PollViewWhereInput[]
  id?: Prisma.StringFilter<"PollView"> | string
  pollId?: Prisma.StringFilter<"PollView"> | string
  userId?: Prisma.StringNullableFilter<"PollView"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"PollView"> | string | null
  userAgent?: Prisma.StringNullableFilter<"PollView"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PollView"> | Date | string
  poll?: Prisma.XOR<Prisma.PollNullableScalarRelationFilter, Prisma.PollWhereInput> | null
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type PollViewOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  poll?: Prisma.PollOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type PollViewWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PollViewWhereInput | Prisma.PollViewWhereInput[]
  OR?: Prisma.PollViewWhereInput[]
  NOT?: Prisma.PollViewWhereInput | Prisma.PollViewWhereInput[]
  pollId?: Prisma.StringFilter<"PollView"> | string
  userId?: Prisma.StringNullableFilter<"PollView"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"PollView"> | string | null
  userAgent?: Prisma.StringNullableFilter<"PollView"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PollView"> | Date | string
  poll?: Prisma.XOR<Prisma.PollNullableScalarRelationFilter, Prisma.PollWhereInput> | null
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id">

export type PollViewOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  ipAddress?: Prisma.SortOrderInput | Prisma.SortOrder
  userAgent?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.PollViewCountOrderByAggregateInput
  _max?: Prisma.PollViewMaxOrderByAggregateInput
  _min?: Prisma.PollViewMinOrderByAggregateInput
}

export type PollViewScalarWhereWithAggregatesInput = {
  AND?: Prisma.PollViewScalarWhereWithAggregatesInput | Prisma.PollViewScalarWhereWithAggregatesInput[]
  OR?: Prisma.PollViewScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PollViewScalarWhereWithAggregatesInput | Prisma.PollViewScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PollView"> | string
  pollId?: Prisma.StringWithAggregatesFilter<"PollView"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"PollView"> | string | null
  ipAddress?: Prisma.StringNullableWithAggregatesFilter<"PollView"> | string | null
  userAgent?: Prisma.StringNullableWithAggregatesFilter<"PollView"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PollView"> | Date | string
}

export type PollViewCreateInput = {
  id?: string
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
  poll?: Prisma.PollCreateNestedOneWithoutViewsInput
  user?: Prisma.UserCreateNestedOneWithoutPollViewsInput
}

export type PollViewUncheckedCreateInput = {
  id?: string
  pollId: string
  userId?: string | null
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneWithoutViewsNestedInput
  user?: Prisma.UserUpdateOneWithoutPollViewsNestedInput
}

export type PollViewUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewCreateManyInput = {
  id?: string
  pollId: string
  userId?: string | null
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewListRelationFilter = {
  every?: Prisma.PollViewWhereInput
  some?: Prisma.PollViewWhereInput
  none?: Prisma.PollViewWhereInput
}

export type PollViewOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PollViewCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PollViewMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PollViewMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  ipAddress?: Prisma.SortOrder
  userAgent?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type PollViewCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput> | Prisma.PollViewCreateWithoutPollInput[] | Prisma.PollViewUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutPollInput | Prisma.PollViewCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.PollViewCreateManyPollInputEnvelope
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
}

export type PollViewUncheckedCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput> | Prisma.PollViewCreateWithoutPollInput[] | Prisma.PollViewUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutPollInput | Prisma.PollViewCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.PollViewCreateManyPollInputEnvelope
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
}

export type PollViewUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput> | Prisma.PollViewCreateWithoutPollInput[] | Prisma.PollViewUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutPollInput | Prisma.PollViewCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.PollViewUpsertWithWhereUniqueWithoutPollInput | Prisma.PollViewUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.PollViewCreateManyPollInputEnvelope
  set?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  disconnect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  delete?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  update?: Prisma.PollViewUpdateWithWhereUniqueWithoutPollInput | Prisma.PollViewUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.PollViewUpdateManyWithWhereWithoutPollInput | Prisma.PollViewUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
}

export type PollViewUncheckedUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput> | Prisma.PollViewCreateWithoutPollInput[] | Prisma.PollViewUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutPollInput | Prisma.PollViewCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.PollViewUpsertWithWhereUniqueWithoutPollInput | Prisma.PollViewUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.PollViewCreateManyPollInputEnvelope
  set?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  disconnect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  delete?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  update?: Prisma.PollViewUpdateWithWhereUniqueWithoutPollInput | Prisma.PollViewUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.PollViewUpdateManyWithWhereWithoutPollInput | Prisma.PollViewUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
}

export type PollViewCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput> | Prisma.PollViewCreateWithoutUserInput[] | Prisma.PollViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutUserInput | Prisma.PollViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PollViewCreateManyUserInputEnvelope
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
}

export type PollViewUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput> | Prisma.PollViewCreateWithoutUserInput[] | Prisma.PollViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutUserInput | Prisma.PollViewCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.PollViewCreateManyUserInputEnvelope
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
}

export type PollViewUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput> | Prisma.PollViewCreateWithoutUserInput[] | Prisma.PollViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutUserInput | Prisma.PollViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PollViewUpsertWithWhereUniqueWithoutUserInput | Prisma.PollViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PollViewCreateManyUserInputEnvelope
  set?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  disconnect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  delete?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  update?: Prisma.PollViewUpdateWithWhereUniqueWithoutUserInput | Prisma.PollViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PollViewUpdateManyWithWhereWithoutUserInput | Prisma.PollViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
}

export type PollViewUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput> | Prisma.PollViewCreateWithoutUserInput[] | Prisma.PollViewUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.PollViewCreateOrConnectWithoutUserInput | Prisma.PollViewCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.PollViewUpsertWithWhereUniqueWithoutUserInput | Prisma.PollViewUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.PollViewCreateManyUserInputEnvelope
  set?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  disconnect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  delete?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  connect?: Prisma.PollViewWhereUniqueInput | Prisma.PollViewWhereUniqueInput[]
  update?: Prisma.PollViewUpdateWithWhereUniqueWithoutUserInput | Prisma.PollViewUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.PollViewUpdateManyWithWhereWithoutUserInput | Prisma.PollViewUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
}

export type PollViewCreateWithoutPollInput = {
  id?: string
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
  user?: Prisma.UserCreateNestedOneWithoutPollViewsInput
}

export type PollViewUncheckedCreateWithoutPollInput = {
  id?: string
  userId?: string | null
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewCreateOrConnectWithoutPollInput = {
  where: Prisma.PollViewWhereUniqueInput
  create: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput>
}

export type PollViewCreateManyPollInputEnvelope = {
  data: Prisma.PollViewCreateManyPollInput | Prisma.PollViewCreateManyPollInput[]
  skipDuplicates?: boolean
}

export type PollViewUpsertWithWhereUniqueWithoutPollInput = {
  where: Prisma.PollViewWhereUniqueInput
  update: Prisma.XOR<Prisma.PollViewUpdateWithoutPollInput, Prisma.PollViewUncheckedUpdateWithoutPollInput>
  create: Prisma.XOR<Prisma.PollViewCreateWithoutPollInput, Prisma.PollViewUncheckedCreateWithoutPollInput>
}

export type PollViewUpdateWithWhereUniqueWithoutPollInput = {
  where: Prisma.PollViewWhereUniqueInput
  data: Prisma.XOR<Prisma.PollViewUpdateWithoutPollInput, Prisma.PollViewUncheckedUpdateWithoutPollInput>
}

export type PollViewUpdateManyWithWhereWithoutPollInput = {
  where: Prisma.PollViewScalarWhereInput
  data: Prisma.XOR<Prisma.PollViewUpdateManyMutationInput, Prisma.PollViewUncheckedUpdateManyWithoutPollInput>
}

export type PollViewScalarWhereInput = {
  AND?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
  OR?: Prisma.PollViewScalarWhereInput[]
  NOT?: Prisma.PollViewScalarWhereInput | Prisma.PollViewScalarWhereInput[]
  id?: Prisma.StringFilter<"PollView"> | string
  pollId?: Prisma.StringFilter<"PollView"> | string
  userId?: Prisma.StringNullableFilter<"PollView"> | string | null
  ipAddress?: Prisma.StringNullableFilter<"PollView"> | string | null
  userAgent?: Prisma.StringNullableFilter<"PollView"> | string | null
  createdAt?: Prisma.DateTimeFilter<"PollView"> | Date | string
}

export type PollViewCreateWithoutUserInput = {
  id?: string
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
  poll?: Prisma.PollCreateNestedOneWithoutViewsInput
}

export type PollViewUncheckedCreateWithoutUserInput = {
  id?: string
  pollId: string
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewCreateOrConnectWithoutUserInput = {
  where: Prisma.PollViewWhereUniqueInput
  create: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput>
}

export type PollViewCreateManyUserInputEnvelope = {
  data: Prisma.PollViewCreateManyUserInput | Prisma.PollViewCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type PollViewUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.PollViewWhereUniqueInput
  update: Prisma.XOR<Prisma.PollViewUpdateWithoutUserInput, Prisma.PollViewUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.PollViewCreateWithoutUserInput, Prisma.PollViewUncheckedCreateWithoutUserInput>
}

export type PollViewUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.PollViewWhereUniqueInput
  data: Prisma.XOR<Prisma.PollViewUpdateWithoutUserInput, Prisma.PollViewUncheckedUpdateWithoutUserInput>
}

export type PollViewUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.PollViewScalarWhereInput
  data: Prisma.XOR<Prisma.PollViewUpdateManyMutationInput, Prisma.PollViewUncheckedUpdateManyWithoutUserInput>
}

export type PollViewCreateManyPollInput = {
  id?: string
  userId?: string | null
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneWithoutPollViewsNestedInput
}

export type PollViewUncheckedUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewUncheckedUpdateManyWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewCreateManyUserInput = {
  id?: string
  pollId: string
  ipAddress?: string | null
  userAgent?: string | null
  createdAt?: Date | string
}

export type PollViewUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneWithoutViewsNestedInput
}

export type PollViewUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollViewUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  ipAddress?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userAgent?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type PollViewSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  userId?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}, ExtArgs["result"]["pollView"]>

export type PollViewSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  userId?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}, ExtArgs["result"]["pollView"]>

export type PollViewSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  userId?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}, ExtArgs["result"]["pollView"]>

export type PollViewSelectScalar = {
  id?: boolean
  pollId?: boolean
  userId?: boolean
  ipAddress?: boolean
  userAgent?: boolean
  createdAt?: boolean
}

export type PollViewOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pollId" | "userId" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["pollView"]>
export type PollViewInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}
export type PollViewIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}
export type PollViewIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollView$pollArgs<ExtArgs>
  user?: boolean | Prisma.PollView$userArgs<ExtArgs>
}

export type $PollViewPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PollView"
  objects: {
    poll: Prisma.$PollPayload<ExtArgs> | null
    user: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    pollId: string
    userId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
  }, ExtArgs["result"]["pollView"]>
  composites: {}
}

export type PollViewGetPayload<S extends boolean | null | undefined | PollViewDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PollViewPayload, S>

export type PollViewCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PollViewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PollViewCountAggregateInputType | true
  }

export interface PollViewDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PollView'], meta: { name: 'PollView' } }
  /**
   * Find zero or one PollView that matches the filter.
   * @param {PollViewFindUniqueArgs} args - Arguments to find a PollView
   * @example
   * // Get one PollView
   * const pollView = await prisma.pollView.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PollViewFindUniqueArgs>(args: Prisma.SelectSubset<T, PollViewFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PollView that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PollViewFindUniqueOrThrowArgs} args - Arguments to find a PollView
   * @example
   * // Get one PollView
   * const pollView = await prisma.pollView.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PollViewFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PollViewFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PollView that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewFindFirstArgs} args - Arguments to find a PollView
   * @example
   * // Get one PollView
   * const pollView = await prisma.pollView.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PollViewFindFirstArgs>(args?: Prisma.SelectSubset<T, PollViewFindFirstArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PollView that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewFindFirstOrThrowArgs} args - Arguments to find a PollView
   * @example
   * // Get one PollView
   * const pollView = await prisma.pollView.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PollViewFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PollViewFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PollViews that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PollViews
   * const pollViews = await prisma.pollView.findMany()
   * 
   * // Get first 10 PollViews
   * const pollViews = await prisma.pollView.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pollViewWithIdOnly = await prisma.pollView.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PollViewFindManyArgs>(args?: Prisma.SelectSubset<T, PollViewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PollView.
   * @param {PollViewCreateArgs} args - Arguments to create a PollView.
   * @example
   * // Create one PollView
   * const PollView = await prisma.pollView.create({
   *   data: {
   *     // ... data to create a PollView
   *   }
   * })
   * 
   */
  create<T extends PollViewCreateArgs>(args: Prisma.SelectSubset<T, PollViewCreateArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PollViews.
   * @param {PollViewCreateManyArgs} args - Arguments to create many PollViews.
   * @example
   * // Create many PollViews
   * const pollView = await prisma.pollView.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PollViewCreateManyArgs>(args?: Prisma.SelectSubset<T, PollViewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PollViews and returns the data saved in the database.
   * @param {PollViewCreateManyAndReturnArgs} args - Arguments to create many PollViews.
   * @example
   * // Create many PollViews
   * const pollView = await prisma.pollView.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PollViews and only return the `id`
   * const pollViewWithIdOnly = await prisma.pollView.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PollViewCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PollViewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PollView.
   * @param {PollViewDeleteArgs} args - Arguments to delete one PollView.
   * @example
   * // Delete one PollView
   * const PollView = await prisma.pollView.delete({
   *   where: {
   *     // ... filter to delete one PollView
   *   }
   * })
   * 
   */
  delete<T extends PollViewDeleteArgs>(args: Prisma.SelectSubset<T, PollViewDeleteArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PollView.
   * @param {PollViewUpdateArgs} args - Arguments to update one PollView.
   * @example
   * // Update one PollView
   * const pollView = await prisma.pollView.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PollViewUpdateArgs>(args: Prisma.SelectSubset<T, PollViewUpdateArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PollViews.
   * @param {PollViewDeleteManyArgs} args - Arguments to filter PollViews to delete.
   * @example
   * // Delete a few PollViews
   * const { count } = await prisma.pollView.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PollViewDeleteManyArgs>(args?: Prisma.SelectSubset<T, PollViewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PollViews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PollViews
   * const pollView = await prisma.pollView.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PollViewUpdateManyArgs>(args: Prisma.SelectSubset<T, PollViewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PollViews and returns the data updated in the database.
   * @param {PollViewUpdateManyAndReturnArgs} args - Arguments to update many PollViews.
   * @example
   * // Update many PollViews
   * const pollView = await prisma.pollView.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PollViews and only return the `id`
   * const pollViewWithIdOnly = await prisma.pollView.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PollViewUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PollViewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PollView.
   * @param {PollViewUpsertArgs} args - Arguments to update or create a PollView.
   * @example
   * // Update or create a PollView
   * const pollView = await prisma.pollView.upsert({
   *   create: {
   *     // ... data to create a PollView
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PollView we want to update
   *   }
   * })
   */
  upsert<T extends PollViewUpsertArgs>(args: Prisma.SelectSubset<T, PollViewUpsertArgs<ExtArgs>>): Prisma.Prisma__PollViewClient<runtime.Types.Result.GetResult<Prisma.$PollViewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PollViews.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewCountArgs} args - Arguments to filter PollViews to count.
   * @example
   * // Count the number of PollViews
   * const count = await prisma.pollView.count({
   *   where: {
   *     // ... the filter for the PollViews we want to count
   *   }
   * })
  **/
  count<T extends PollViewCountArgs>(
    args?: Prisma.Subset<T, PollViewCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PollViewCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PollView.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PollViewAggregateArgs>(args: Prisma.Subset<T, PollViewAggregateArgs>): Prisma.PrismaPromise<GetPollViewAggregateType<T>>

  /**
   * Group by PollView.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollViewGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PollViewGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PollViewGroupByArgs['orderBy'] }
      : { orderBy?: PollViewGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PollViewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPollViewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PollView model
 */
readonly fields: PollViewFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PollView.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PollViewClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  poll<T extends Prisma.PollView$pollArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollView$pollArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.PollView$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollView$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PollView model
 */
export interface PollViewFieldRefs {
  readonly id: Prisma.FieldRef<"PollView", 'String'>
  readonly pollId: Prisma.FieldRef<"PollView", 'String'>
  readonly userId: Prisma.FieldRef<"PollView", 'String'>
  readonly ipAddress: Prisma.FieldRef<"PollView", 'String'>
  readonly userAgent: Prisma.FieldRef<"PollView", 'String'>
  readonly createdAt: Prisma.FieldRef<"PollView", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PollView findUnique
 */
export type PollViewFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter, which PollView to fetch.
   */
  where: Prisma.PollViewWhereUniqueInput
}

/**
 * PollView findUniqueOrThrow
 */
export type PollViewFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter, which PollView to fetch.
   */
  where: Prisma.PollViewWhereUniqueInput
}

/**
 * PollView findFirst
 */
export type PollViewFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter, which PollView to fetch.
   */
  where?: Prisma.PollViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollViews to fetch.
   */
  orderBy?: Prisma.PollViewOrderByWithRelationInput | Prisma.PollViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PollViews.
   */
  cursor?: Prisma.PollViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PollViews.
   */
  distinct?: Prisma.PollViewScalarFieldEnum | Prisma.PollViewScalarFieldEnum[]
}

/**
 * PollView findFirstOrThrow
 */
export type PollViewFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter, which PollView to fetch.
   */
  where?: Prisma.PollViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollViews to fetch.
   */
  orderBy?: Prisma.PollViewOrderByWithRelationInput | Prisma.PollViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PollViews.
   */
  cursor?: Prisma.PollViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollViews.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PollViews.
   */
  distinct?: Prisma.PollViewScalarFieldEnum | Prisma.PollViewScalarFieldEnum[]
}

/**
 * PollView findMany
 */
export type PollViewFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter, which PollViews to fetch.
   */
  where?: Prisma.PollViewWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollViews to fetch.
   */
  orderBy?: Prisma.PollViewOrderByWithRelationInput | Prisma.PollViewOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PollViews.
   */
  cursor?: Prisma.PollViewWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollViews from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollViews.
   */
  skip?: number
  distinct?: Prisma.PollViewScalarFieldEnum | Prisma.PollViewScalarFieldEnum[]
}

/**
 * PollView create
 */
export type PollViewCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * The data needed to create a PollView.
   */
  data: Prisma.XOR<Prisma.PollViewCreateInput, Prisma.PollViewUncheckedCreateInput>
}

/**
 * PollView createMany
 */
export type PollViewCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PollViews.
   */
  data: Prisma.PollViewCreateManyInput | Prisma.PollViewCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PollView createManyAndReturn
 */
export type PollViewCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * The data used to create many PollViews.
   */
  data: Prisma.PollViewCreateManyInput | Prisma.PollViewCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PollView update
 */
export type PollViewUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * The data needed to update a PollView.
   */
  data: Prisma.XOR<Prisma.PollViewUpdateInput, Prisma.PollViewUncheckedUpdateInput>
  /**
   * Choose, which PollView to update.
   */
  where: Prisma.PollViewWhereUniqueInput
}

/**
 * PollView updateMany
 */
export type PollViewUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PollViews.
   */
  data: Prisma.XOR<Prisma.PollViewUpdateManyMutationInput, Prisma.PollViewUncheckedUpdateManyInput>
  /**
   * Filter which PollViews to update
   */
  where?: Prisma.PollViewWhereInput
  /**
   * Limit how many PollViews to update.
   */
  limit?: number
}

/**
 * PollView updateManyAndReturn
 */
export type PollViewUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * The data used to update PollViews.
   */
  data: Prisma.XOR<Prisma.PollViewUpdateManyMutationInput, Prisma.PollViewUncheckedUpdateManyInput>
  /**
   * Filter which PollViews to update
   */
  where?: Prisma.PollViewWhereInput
  /**
   * Limit how many PollViews to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PollView upsert
 */
export type PollViewUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * The filter to search for the PollView to update in case it exists.
   */
  where: Prisma.PollViewWhereUniqueInput
  /**
   * In case the PollView found by the `where` argument doesn't exist, create a new PollView with this data.
   */
  create: Prisma.XOR<Prisma.PollViewCreateInput, Prisma.PollViewUncheckedCreateInput>
  /**
   * In case the PollView was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PollViewUpdateInput, Prisma.PollViewUncheckedUpdateInput>
}

/**
 * PollView delete
 */
export type PollViewDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
  /**
   * Filter which PollView to delete.
   */
  where: Prisma.PollViewWhereUniqueInput
}

/**
 * PollView deleteMany
 */
export type PollViewDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PollViews to delete
   */
  where?: Prisma.PollViewWhereInput
  /**
   * Limit how many PollViews to delete.
   */
  limit?: number
}

/**
 * PollView.poll
 */
export type PollView$pollArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null
  where?: Prisma.PollWhereInput
}

/**
 * PollView.user
 */
export type PollView$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * PollView without action
 */
export type PollViewDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null
}
