
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `PollOption` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PollOption
 * 
 */
export type PollOptionModel = runtime.Types.Result.DefaultSelection<Prisma.$PollOptionPayload>

export type AggregatePollOption = {
  _count: PollOptionCountAggregateOutputType | null
  _avg: PollOptionAvgAggregateOutputType | null
  _sum: PollOptionSumAggregateOutputType | null
  _min: PollOptionMinAggregateOutputType | null
  _max: PollOptionMaxAggregateOutputType | null
}

export type PollOptionAvgAggregateOutputType = {
  order: number | null
}

export type PollOptionSumAggregateOutputType = {
  order: number | null
}

export type PollOptionMinAggregateOutputType = {
  id: string | null
  text: string | null
  description: string | null
  image: string | null
  order: number | null
  pollId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PollOptionMaxAggregateOutputType = {
  id: string | null
  text: string | null
  description: string | null
  image: string | null
  order: number | null
  pollId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PollOptionCountAggregateOutputType = {
  id: number
  text: number
  description: number
  image: number
  order: number
  pollId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PollOptionAvgAggregateInputType = {
  order?: true
}

export type PollOptionSumAggregateInputType = {
  order?: true
}

export type PollOptionMinAggregateInputType = {
  id?: true
  text?: true
  description?: true
  image?: true
  order?: true
  pollId?: true
  createdAt?: true
  updatedAt?: true
}

export type PollOptionMaxAggregateInputType = {
  id?: true
  text?: true
  description?: true
  image?: true
  order?: true
  pollId?: true
  createdAt?: true
  updatedAt?: true
}

export type PollOptionCountAggregateInputType = {
  id?: true
  text?: true
  description?: true
  image?: true
  order?: true
  pollId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PollOptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PollOption to aggregate.
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollOptions to fetch.
   */
  orderBy?: Prisma.PollOptionOrderByWithRelationInput | Prisma.PollOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PollOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PollOptions
  **/
  _count?: true | PollOptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PollOptionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PollOptionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PollOptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PollOptionMaxAggregateInputType
}

export type GetPollOptionAggregateType<T extends PollOptionAggregateArgs> = {
      [P in keyof T & keyof AggregatePollOption]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePollOption[P]>
    : Prisma.GetScalarType<T[P], AggregatePollOption[P]>
}




export type PollOptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PollOptionWhereInput
  orderBy?: Prisma.PollOptionOrderByWithAggregationInput | Prisma.PollOptionOrderByWithAggregationInput[]
  by: Prisma.PollOptionScalarFieldEnum[] | Prisma.PollOptionScalarFieldEnum
  having?: Prisma.PollOptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PollOptionCountAggregateInputType | true
  _avg?: PollOptionAvgAggregateInputType
  _sum?: PollOptionSumAggregateInputType
  _min?: PollOptionMinAggregateInputType
  _max?: PollOptionMaxAggregateInputType
}

export type PollOptionGroupByOutputType = {
  id: string
  text: string
  description: string | null
  image: string | null
  order: number
  pollId: string
  createdAt: Date
  updatedAt: Date
  _count: PollOptionCountAggregateOutputType | null
  _avg: PollOptionAvgAggregateOutputType | null
  _sum: PollOptionSumAggregateOutputType | null
  _min: PollOptionMinAggregateOutputType | null
  _max: PollOptionMaxAggregateOutputType | null
}

type GetPollOptionGroupByPayload<T extends PollOptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PollOptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PollOptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PollOptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PollOptionGroupByOutputType[P]>
      }
    >
  > 



export type PollOptionWhereInput = {
  AND?: Prisma.PollOptionWhereInput | Prisma.PollOptionWhereInput[]
  OR?: Prisma.PollOptionWhereInput[]
  NOT?: Prisma.PollOptionWhereInput | Prisma.PollOptionWhereInput[]
  id?: Prisma.StringFilter<"PollOption"> | string
  text?: Prisma.StringFilter<"PollOption"> | string
  description?: Prisma.StringNullableFilter<"PollOption"> | string | null
  image?: Prisma.StringNullableFilter<"PollOption"> | string | null
  order?: Prisma.IntFilter<"PollOption"> | number
  pollId?: Prisma.StringFilter<"PollOption"> | string
  createdAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  votes?: Prisma.VoteListRelationFilter
}

export type PollOptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  poll?: Prisma.PollOrderByWithRelationInput
  votes?: Prisma.VoteOrderByRelationAggregateInput
}

export type PollOptionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.PollOptionWhereInput | Prisma.PollOptionWhereInput[]
  OR?: Prisma.PollOptionWhereInput[]
  NOT?: Prisma.PollOptionWhereInput | Prisma.PollOptionWhereInput[]
  text?: Prisma.StringFilter<"PollOption"> | string
  description?: Prisma.StringNullableFilter<"PollOption"> | string | null
  image?: Prisma.StringNullableFilter<"PollOption"> | string | null
  order?: Prisma.IntFilter<"PollOption"> | number
  pollId?: Prisma.StringFilter<"PollOption"> | string
  createdAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  votes?: Prisma.VoteListRelationFilter
}, "id">

export type PollOptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  image?: Prisma.SortOrderInput | Prisma.SortOrder
  order?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PollOptionCountOrderByAggregateInput
  _avg?: Prisma.PollOptionAvgOrderByAggregateInput
  _max?: Prisma.PollOptionMaxOrderByAggregateInput
  _min?: Prisma.PollOptionMinOrderByAggregateInput
  _sum?: Prisma.PollOptionSumOrderByAggregateInput
}

export type PollOptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.PollOptionScalarWhereWithAggregatesInput | Prisma.PollOptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.PollOptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PollOptionScalarWhereWithAggregatesInput | Prisma.PollOptionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"PollOption"> | string
  text?: Prisma.StringWithAggregatesFilter<"PollOption"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"PollOption"> | string | null
  image?: Prisma.StringNullableWithAggregatesFilter<"PollOption"> | string | null
  order?: Prisma.IntWithAggregatesFilter<"PollOption"> | number
  pollId?: Prisma.StringWithAggregatesFilter<"PollOption"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PollOption"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PollOption"> | Date | string
}

export type PollOptionCreateInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  poll: Prisma.PollCreateNestedOneWithoutOptionsInput
  votes?: Prisma.VoteCreateNestedManyWithoutOptionInput
}

export type PollOptionUncheckedCreateInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  pollId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutOptionInput
}

export type PollOptionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneRequiredWithoutOptionsNestedInput
  votes?: Prisma.VoteUpdateManyWithoutOptionNestedInput
}

export type PollOptionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  votes?: Prisma.VoteUncheckedUpdateManyWithoutOptionNestedInput
}

export type PollOptionCreateManyInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  pollId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PollOptionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollOptionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollOptionListRelationFilter = {
  every?: Prisma.PollOptionWhereInput
  some?: Prisma.PollOptionWhereInput
  none?: Prisma.PollOptionWhereInput
}

export type PollOptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PollOptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  order?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PollOptionAvgOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type PollOptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  order?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PollOptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  text?: Prisma.SortOrder
  description?: Prisma.SortOrder
  image?: Prisma.SortOrder
  order?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PollOptionSumOrderByAggregateInput = {
  order?: Prisma.SortOrder
}

export type PollOptionScalarRelationFilter = {
  is?: Prisma.PollOptionWhereInput
  isNot?: Prisma.PollOptionWhereInput
}

export type PollOptionCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput> | Prisma.PollOptionCreateWithoutPollInput[] | Prisma.PollOptionUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutPollInput | Prisma.PollOptionCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.PollOptionCreateManyPollInputEnvelope
  connect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
}

export type PollOptionUncheckedCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput> | Prisma.PollOptionCreateWithoutPollInput[] | Prisma.PollOptionUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutPollInput | Prisma.PollOptionCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.PollOptionCreateManyPollInputEnvelope
  connect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
}

export type PollOptionUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput> | Prisma.PollOptionCreateWithoutPollInput[] | Prisma.PollOptionUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutPollInput | Prisma.PollOptionCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.PollOptionUpsertWithWhereUniqueWithoutPollInput | Prisma.PollOptionUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.PollOptionCreateManyPollInputEnvelope
  set?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  disconnect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  delete?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  connect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  update?: Prisma.PollOptionUpdateWithWhereUniqueWithoutPollInput | Prisma.PollOptionUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.PollOptionUpdateManyWithWhereWithoutPollInput | Prisma.PollOptionUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.PollOptionScalarWhereInput | Prisma.PollOptionScalarWhereInput[]
}

export type PollOptionUncheckedUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput> | Prisma.PollOptionCreateWithoutPollInput[] | Prisma.PollOptionUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutPollInput | Prisma.PollOptionCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.PollOptionUpsertWithWhereUniqueWithoutPollInput | Prisma.PollOptionUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.PollOptionCreateManyPollInputEnvelope
  set?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  disconnect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  delete?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  connect?: Prisma.PollOptionWhereUniqueInput | Prisma.PollOptionWhereUniqueInput[]
  update?: Prisma.PollOptionUpdateWithWhereUniqueWithoutPollInput | Prisma.PollOptionUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.PollOptionUpdateManyWithWhereWithoutPollInput | Prisma.PollOptionUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.PollOptionScalarWhereInput | Prisma.PollOptionScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type PollOptionCreateNestedOneWithoutVotesInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutVotesInput, Prisma.PollOptionUncheckedCreateWithoutVotesInput>
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutVotesInput
  connect?: Prisma.PollOptionWhereUniqueInput
}

export type PollOptionUpdateOneRequiredWithoutVotesNestedInput = {
  create?: Prisma.XOR<Prisma.PollOptionCreateWithoutVotesInput, Prisma.PollOptionUncheckedCreateWithoutVotesInput>
  connectOrCreate?: Prisma.PollOptionCreateOrConnectWithoutVotesInput
  upsert?: Prisma.PollOptionUpsertWithoutVotesInput
  connect?: Prisma.PollOptionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PollOptionUpdateToOneWithWhereWithoutVotesInput, Prisma.PollOptionUpdateWithoutVotesInput>, Prisma.PollOptionUncheckedUpdateWithoutVotesInput>
}

export type PollOptionCreateWithoutPollInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  votes?: Prisma.VoteCreateNestedManyWithoutOptionInput
}

export type PollOptionUncheckedCreateWithoutPollInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutOptionInput
}

export type PollOptionCreateOrConnectWithoutPollInput = {
  where: Prisma.PollOptionWhereUniqueInput
  create: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput>
}

export type PollOptionCreateManyPollInputEnvelope = {
  data: Prisma.PollOptionCreateManyPollInput | Prisma.PollOptionCreateManyPollInput[]
  skipDuplicates?: boolean
}

export type PollOptionUpsertWithWhereUniqueWithoutPollInput = {
  where: Prisma.PollOptionWhereUniqueInput
  update: Prisma.XOR<Prisma.PollOptionUpdateWithoutPollInput, Prisma.PollOptionUncheckedUpdateWithoutPollInput>
  create: Prisma.XOR<Prisma.PollOptionCreateWithoutPollInput, Prisma.PollOptionUncheckedCreateWithoutPollInput>
}

export type PollOptionUpdateWithWhereUniqueWithoutPollInput = {
  where: Prisma.PollOptionWhereUniqueInput
  data: Prisma.XOR<Prisma.PollOptionUpdateWithoutPollInput, Prisma.PollOptionUncheckedUpdateWithoutPollInput>
}

export type PollOptionUpdateManyWithWhereWithoutPollInput = {
  where: Prisma.PollOptionScalarWhereInput
  data: Prisma.XOR<Prisma.PollOptionUpdateManyMutationInput, Prisma.PollOptionUncheckedUpdateManyWithoutPollInput>
}

export type PollOptionScalarWhereInput = {
  AND?: Prisma.PollOptionScalarWhereInput | Prisma.PollOptionScalarWhereInput[]
  OR?: Prisma.PollOptionScalarWhereInput[]
  NOT?: Prisma.PollOptionScalarWhereInput | Prisma.PollOptionScalarWhereInput[]
  id?: Prisma.StringFilter<"PollOption"> | string
  text?: Prisma.StringFilter<"PollOption"> | string
  description?: Prisma.StringNullableFilter<"PollOption"> | string | null
  image?: Prisma.StringNullableFilter<"PollOption"> | string | null
  order?: Prisma.IntFilter<"PollOption"> | number
  pollId?: Prisma.StringFilter<"PollOption"> | string
  createdAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PollOption"> | Date | string
}

export type PollOptionCreateWithoutVotesInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
  poll: Prisma.PollCreateNestedOneWithoutOptionsInput
}

export type PollOptionUncheckedCreateWithoutVotesInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  pollId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PollOptionCreateOrConnectWithoutVotesInput = {
  where: Prisma.PollOptionWhereUniqueInput
  create: Prisma.XOR<Prisma.PollOptionCreateWithoutVotesInput, Prisma.PollOptionUncheckedCreateWithoutVotesInput>
}

export type PollOptionUpsertWithoutVotesInput = {
  update: Prisma.XOR<Prisma.PollOptionUpdateWithoutVotesInput, Prisma.PollOptionUncheckedUpdateWithoutVotesInput>
  create: Prisma.XOR<Prisma.PollOptionCreateWithoutVotesInput, Prisma.PollOptionUncheckedCreateWithoutVotesInput>
  where?: Prisma.PollOptionWhereInput
}

export type PollOptionUpdateToOneWithWhereWithoutVotesInput = {
  where?: Prisma.PollOptionWhereInput
  data: Prisma.XOR<Prisma.PollOptionUpdateWithoutVotesInput, Prisma.PollOptionUncheckedUpdateWithoutVotesInput>
}

export type PollOptionUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneRequiredWithoutOptionsNestedInput
}

export type PollOptionUncheckedUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PollOptionCreateManyPollInput = {
  id?: string
  text: string
  description?: string | null
  image?: string | null
  order: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PollOptionUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  votes?: Prisma.VoteUpdateManyWithoutOptionNestedInput
}

export type PollOptionUncheckedUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  votes?: Prisma.VoteUncheckedUpdateManyWithoutOptionNestedInput
}

export type PollOptionUncheckedUpdateManyWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  text?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  image?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  order?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PollOptionCountOutputType
 */

export type PollOptionCountOutputType = {
  votes: number
}

export type PollOptionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  votes?: boolean | PollOptionCountOutputTypeCountVotesArgs
}

/**
 * PollOptionCountOutputType without action
 */
export type PollOptionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOptionCountOutputType
   */
  select?: Prisma.PollOptionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PollOptionCountOutputType without action
 */
export type PollOptionCountOutputTypeCountVotesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VoteWhereInput
}


export type PollOptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  description?: boolean
  image?: boolean
  order?: boolean
  pollId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  votes?: boolean | Prisma.PollOption$votesArgs<ExtArgs>
  _count?: boolean | Prisma.PollOptionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pollOption"]>

export type PollOptionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  description?: boolean
  image?: boolean
  order?: boolean
  pollId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pollOption"]>

export type PollOptionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  text?: boolean
  description?: boolean
  image?: boolean
  order?: boolean
  pollId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}, ExtArgs["result"]["pollOption"]>

export type PollOptionSelectScalar = {
  id?: boolean
  text?: boolean
  description?: boolean
  image?: boolean
  order?: boolean
  pollId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PollOptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "text" | "description" | "image" | "order" | "pollId" | "createdAt" | "updatedAt", ExtArgs["result"]["pollOption"]>
export type PollOptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  votes?: boolean | Prisma.PollOption$votesArgs<ExtArgs>
  _count?: boolean | Prisma.PollOptionCountOutputTypeDefaultArgs<ExtArgs>
}
export type PollOptionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}
export type PollOptionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
}

export type $PollOptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PollOption"
  objects: {
    poll: Prisma.$PollPayload<ExtArgs>
    votes: Prisma.$VotePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    text: string
    description: string | null
    image: string | null
    order: number
    pollId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["pollOption"]>
  composites: {}
}

export type PollOptionGetPayload<S extends boolean | null | undefined | PollOptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PollOptionPayload, S>

export type PollOptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PollOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PollOptionCountAggregateInputType | true
  }

export interface PollOptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PollOption'], meta: { name: 'PollOption' } }
  /**
   * Find zero or one PollOption that matches the filter.
   * @param {PollOptionFindUniqueArgs} args - Arguments to find a PollOption
   * @example
   * // Get one PollOption
   * const pollOption = await prisma.pollOption.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PollOptionFindUniqueArgs>(args: Prisma.SelectSubset<T, PollOptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PollOption that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PollOptionFindUniqueOrThrowArgs} args - Arguments to find a PollOption
   * @example
   * // Get one PollOption
   * const pollOption = await prisma.pollOption.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PollOptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PollOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PollOption that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionFindFirstArgs} args - Arguments to find a PollOption
   * @example
   * // Get one PollOption
   * const pollOption = await prisma.pollOption.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PollOptionFindFirstArgs>(args?: Prisma.SelectSubset<T, PollOptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PollOption that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionFindFirstOrThrowArgs} args - Arguments to find a PollOption
   * @example
   * // Get one PollOption
   * const pollOption = await prisma.pollOption.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PollOptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PollOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PollOptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PollOptions
   * const pollOptions = await prisma.pollOption.findMany()
   * 
   * // Get first 10 PollOptions
   * const pollOptions = await prisma.pollOption.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const pollOptionWithIdOnly = await prisma.pollOption.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PollOptionFindManyArgs>(args?: Prisma.SelectSubset<T, PollOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PollOption.
   * @param {PollOptionCreateArgs} args - Arguments to create a PollOption.
   * @example
   * // Create one PollOption
   * const PollOption = await prisma.pollOption.create({
   *   data: {
   *     // ... data to create a PollOption
   *   }
   * })
   * 
   */
  create<T extends PollOptionCreateArgs>(args: Prisma.SelectSubset<T, PollOptionCreateArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PollOptions.
   * @param {PollOptionCreateManyArgs} args - Arguments to create many PollOptions.
   * @example
   * // Create many PollOptions
   * const pollOption = await prisma.pollOption.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PollOptionCreateManyArgs>(args?: Prisma.SelectSubset<T, PollOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PollOptions and returns the data saved in the database.
   * @param {PollOptionCreateManyAndReturnArgs} args - Arguments to create many PollOptions.
   * @example
   * // Create many PollOptions
   * const pollOption = await prisma.pollOption.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PollOptions and only return the `id`
   * const pollOptionWithIdOnly = await prisma.pollOption.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PollOptionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PollOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PollOption.
   * @param {PollOptionDeleteArgs} args - Arguments to delete one PollOption.
   * @example
   * // Delete one PollOption
   * const PollOption = await prisma.pollOption.delete({
   *   where: {
   *     // ... filter to delete one PollOption
   *   }
   * })
   * 
   */
  delete<T extends PollOptionDeleteArgs>(args: Prisma.SelectSubset<T, PollOptionDeleteArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PollOption.
   * @param {PollOptionUpdateArgs} args - Arguments to update one PollOption.
   * @example
   * // Update one PollOption
   * const pollOption = await prisma.pollOption.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PollOptionUpdateArgs>(args: Prisma.SelectSubset<T, PollOptionUpdateArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PollOptions.
   * @param {PollOptionDeleteManyArgs} args - Arguments to filter PollOptions to delete.
   * @example
   * // Delete a few PollOptions
   * const { count } = await prisma.pollOption.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PollOptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, PollOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PollOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PollOptions
   * const pollOption = await prisma.pollOption.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PollOptionUpdateManyArgs>(args: Prisma.SelectSubset<T, PollOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PollOptions and returns the data updated in the database.
   * @param {PollOptionUpdateManyAndReturnArgs} args - Arguments to update many PollOptions.
   * @example
   * // Update many PollOptions
   * const pollOption = await prisma.pollOption.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PollOptions and only return the `id`
   * const pollOptionWithIdOnly = await prisma.pollOption.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PollOptionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PollOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PollOption.
   * @param {PollOptionUpsertArgs} args - Arguments to update or create a PollOption.
   * @example
   * // Update or create a PollOption
   * const pollOption = await prisma.pollOption.upsert({
   *   create: {
   *     // ... data to create a PollOption
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PollOption we want to update
   *   }
   * })
   */
  upsert<T extends PollOptionUpsertArgs>(args: Prisma.SelectSubset<T, PollOptionUpsertArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PollOptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionCountArgs} args - Arguments to filter PollOptions to count.
   * @example
   * // Count the number of PollOptions
   * const count = await prisma.pollOption.count({
   *   where: {
   *     // ... the filter for the PollOptions we want to count
   *   }
   * })
  **/
  count<T extends PollOptionCountArgs>(
    args?: Prisma.Subset<T, PollOptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PollOptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PollOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PollOptionAggregateArgs>(args: Prisma.Subset<T, PollOptionAggregateArgs>): Prisma.PrismaPromise<GetPollOptionAggregateType<T>>

  /**
   * Group by PollOption.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollOptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PollOptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PollOptionGroupByArgs['orderBy'] }
      : { orderBy?: PollOptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PollOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPollOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PollOption model
 */
readonly fields: PollOptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PollOption.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PollOptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  poll<T extends Prisma.PollDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollDefaultArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  votes<T extends Prisma.PollOption$votesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollOption$votesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PollOption model
 */
export interface PollOptionFieldRefs {
  readonly id: Prisma.FieldRef<"PollOption", 'String'>
  readonly text: Prisma.FieldRef<"PollOption", 'String'>
  readonly description: Prisma.FieldRef<"PollOption", 'String'>
  readonly image: Prisma.FieldRef<"PollOption", 'String'>
  readonly order: Prisma.FieldRef<"PollOption", 'Int'>
  readonly pollId: Prisma.FieldRef<"PollOption", 'String'>
  readonly createdAt: Prisma.FieldRef<"PollOption", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PollOption", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PollOption findUnique
 */
export type PollOptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter, which PollOption to fetch.
   */
  where: Prisma.PollOptionWhereUniqueInput
}

/**
 * PollOption findUniqueOrThrow
 */
export type PollOptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter, which PollOption to fetch.
   */
  where: Prisma.PollOptionWhereUniqueInput
}

/**
 * PollOption findFirst
 */
export type PollOptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter, which PollOption to fetch.
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollOptions to fetch.
   */
  orderBy?: Prisma.PollOptionOrderByWithRelationInput | Prisma.PollOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PollOptions.
   */
  cursor?: Prisma.PollOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PollOptions.
   */
  distinct?: Prisma.PollOptionScalarFieldEnum | Prisma.PollOptionScalarFieldEnum[]
}

/**
 * PollOption findFirstOrThrow
 */
export type PollOptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter, which PollOption to fetch.
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollOptions to fetch.
   */
  orderBy?: Prisma.PollOptionOrderByWithRelationInput | Prisma.PollOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PollOptions.
   */
  cursor?: Prisma.PollOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollOptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PollOptions.
   */
  distinct?: Prisma.PollOptionScalarFieldEnum | Prisma.PollOptionScalarFieldEnum[]
}

/**
 * PollOption findMany
 */
export type PollOptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter, which PollOptions to fetch.
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PollOptions to fetch.
   */
  orderBy?: Prisma.PollOptionOrderByWithRelationInput | Prisma.PollOptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PollOptions.
   */
  cursor?: Prisma.PollOptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PollOptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PollOptions.
   */
  skip?: number
  distinct?: Prisma.PollOptionScalarFieldEnum | Prisma.PollOptionScalarFieldEnum[]
}

/**
 * PollOption create
 */
export type PollOptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * The data needed to create a PollOption.
   */
  data: Prisma.XOR<Prisma.PollOptionCreateInput, Prisma.PollOptionUncheckedCreateInput>
}

/**
 * PollOption createMany
 */
export type PollOptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PollOptions.
   */
  data: Prisma.PollOptionCreateManyInput | Prisma.PollOptionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PollOption createManyAndReturn
 */
export type PollOptionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * The data used to create many PollOptions.
   */
  data: Prisma.PollOptionCreateManyInput | Prisma.PollOptionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * PollOption update
 */
export type PollOptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * The data needed to update a PollOption.
   */
  data: Prisma.XOR<Prisma.PollOptionUpdateInput, Prisma.PollOptionUncheckedUpdateInput>
  /**
   * Choose, which PollOption to update.
   */
  where: Prisma.PollOptionWhereUniqueInput
}

/**
 * PollOption updateMany
 */
export type PollOptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PollOptions.
   */
  data: Prisma.XOR<Prisma.PollOptionUpdateManyMutationInput, Prisma.PollOptionUncheckedUpdateManyInput>
  /**
   * Filter which PollOptions to update
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * Limit how many PollOptions to update.
   */
  limit?: number
}

/**
 * PollOption updateManyAndReturn
 */
export type PollOptionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * The data used to update PollOptions.
   */
  data: Prisma.XOR<Prisma.PollOptionUpdateManyMutationInput, Prisma.PollOptionUncheckedUpdateManyInput>
  /**
   * Filter which PollOptions to update
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * Limit how many PollOptions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * PollOption upsert
 */
export type PollOptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * The filter to search for the PollOption to update in case it exists.
   */
  where: Prisma.PollOptionWhereUniqueInput
  /**
   * In case the PollOption found by the `where` argument doesn't exist, create a new PollOption with this data.
   */
  create: Prisma.XOR<Prisma.PollOptionCreateInput, Prisma.PollOptionUncheckedCreateInput>
  /**
   * In case the PollOption was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PollOptionUpdateInput, Prisma.PollOptionUncheckedUpdateInput>
}

/**
 * PollOption delete
 */
export type PollOptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
  /**
   * Filter which PollOption to delete.
   */
  where: Prisma.PollOptionWhereUniqueInput
}

/**
 * PollOption deleteMany
 */
export type PollOptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PollOptions to delete
   */
  where?: Prisma.PollOptionWhereInput
  /**
   * Limit how many PollOptions to delete.
   */
  limit?: number
}

/**
 * PollOption.votes
 */
export type PollOption$votesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  where?: Prisma.VoteWhereInput
  orderBy?: Prisma.VoteOrderByWithRelationInput | Prisma.VoteOrderByWithRelationInput[]
  cursor?: Prisma.VoteWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[]
}

/**
 * PollOption without action
 */
export type PollOptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null
}
