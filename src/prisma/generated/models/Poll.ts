/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Poll` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library";
import type * as $Enums from "../enums.ts";
import type * as Prisma from "../internal/prismaNamespace.ts";

/**
 * Model Poll
 *
 */
export type PollModel =
  runtime.Types.Result.DefaultSelection<Prisma.$PollPayload>;

export type AggregatePoll = {
  _count: PollCountAggregateOutputType | null;
  _min: PollMinAggregateOutputType | null;
  _max: PollMaxAggregateOutputType | null;
};

export type PollMinAggregateOutputType = {
  id: string | null;
  question: string | null;
  description: string | null;
  creatorId: string | null;
  isPublic: boolean | null;
  isActive: boolean | null;
  closesAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type PollMaxAggregateOutputType = {
  id: string | null;
  question: string | null;
  description: string | null;
  creatorId: string | null;
  isPublic: boolean | null;
  isActive: boolean | null;
  closesAt: Date | null;
  createdAt: Date | null;
  updatedAt: Date | null;
};

export type PollCountAggregateOutputType = {
  id: number;
  question: number;
  description: number;
  settings: number;
  creatorId: number;
  isPublic: number;
  isActive: number;
  closesAt: number;
  createdAt: number;
  updatedAt: number;
  _all: number;
};

export type PollMinAggregateInputType = {
  id?: true;
  question?: true;
  description?: true;
  creatorId?: true;
  isPublic?: true;
  isActive?: true;
  closesAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type PollMaxAggregateInputType = {
  id?: true;
  question?: true;
  description?: true;
  creatorId?: true;
  isPublic?: true;
  isActive?: true;
  closesAt?: true;
  createdAt?: true;
  updatedAt?: true;
};

export type PollCountAggregateInputType = {
  id?: true;
  question?: true;
  description?: true;
  settings?: true;
  creatorId?: true;
  isPublic?: true;
  isActive?: true;
  closesAt?: true;
  createdAt?: true;
  updatedAt?: true;
  _all?: true;
};

export type PollAggregateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Poll to aggregate.
   */
  where?: Prisma.PollWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Polls to fetch.
   */
  orderBy?:
    | Prisma.PollOrderByWithRelationInput
    | Prisma.PollOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.PollWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Polls.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Polls
   **/
  _count?: true | PollCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: PollMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: PollMaxAggregateInputType;
};

export type GetPollAggregateType<T extends PollAggregateArgs> = {
  [P in keyof T & keyof AggregatePoll]: P extends "_count" | "count"
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePoll[P]>
    : Prisma.GetScalarType<T[P], AggregatePoll[P]>;
};

export type PollGroupByArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PollWhereInput;
  orderBy?:
    | Prisma.PollOrderByWithAggregationInput
    | Prisma.PollOrderByWithAggregationInput[];
  by: Prisma.PollScalarFieldEnum[] | Prisma.PollScalarFieldEnum;
  having?: Prisma.PollScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: PollCountAggregateInputType | true;
  _min?: PollMinAggregateInputType;
  _max?: PollMaxAggregateInputType;
};

export type PollGroupByOutputType = {
  id: string;
  question: string;
  description: string | null;
  settings: runtime.JsonValue | null;
  creatorId: string;
  isPublic: boolean;
  isActive: boolean;
  closesAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  _count: PollCountAggregateOutputType | null;
  _min: PollMinAggregateOutputType | null;
  _max: PollMaxAggregateOutputType | null;
};

type GetPollGroupByPayload<T extends PollGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PollGroupByOutputType, T["by"]> & {
      [P in keyof T & keyof PollGroupByOutputType]: P extends "_count"
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], PollGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], PollGroupByOutputType[P]>;
    }
  >
>;

export type PollWhereInput = {
  AND?: Prisma.PollWhereInput | Prisma.PollWhereInput[];
  OR?: Prisma.PollWhereInput[];
  NOT?: Prisma.PollWhereInput | Prisma.PollWhereInput[];
  id?: Prisma.StringFilter<"Poll"> | string;
  question?: Prisma.StringFilter<"Poll"> | string;
  description?: Prisma.StringNullableFilter<"Poll"> | string | null;
  settings?: Prisma.JsonNullableFilter<"Poll">;
  creatorId?: Prisma.StringFilter<"Poll"> | string;
  isPublic?: Prisma.BoolFilter<"Poll"> | boolean;
  isActive?: Prisma.BoolFilter<"Poll"> | boolean;
  closesAt?: Prisma.DateTimeNullableFilter<"Poll"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
  creator?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  options?: Prisma.PollOptionListRelationFilter;
  votes?: Prisma.VoteListRelationFilter;
  likes?: Prisma.LikeListRelationFilter;
  comments?: Prisma.CommentListRelationFilter;
  views?: Prisma.PollViewListRelationFilter;
  notifications?: Prisma.NotificationListRelationFilter;
};

export type PollOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  question?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  settings?: Prisma.SortOrderInput | Prisma.SortOrder;
  creatorId?: Prisma.SortOrder;
  isPublic?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  closesAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  creator?: Prisma.UserOrderByWithRelationInput;
  options?: Prisma.PollOptionOrderByRelationAggregateInput;
  votes?: Prisma.VoteOrderByRelationAggregateInput;
  likes?: Prisma.LikeOrderByRelationAggregateInput;
  comments?: Prisma.CommentOrderByRelationAggregateInput;
  views?: Prisma.PollViewOrderByRelationAggregateInput;
  notifications?: Prisma.NotificationOrderByRelationAggregateInput;
};

export type PollWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.PollWhereInput | Prisma.PollWhereInput[];
    OR?: Prisma.PollWhereInput[];
    NOT?: Prisma.PollWhereInput | Prisma.PollWhereInput[];
    question?: Prisma.StringFilter<"Poll"> | string;
    description?: Prisma.StringNullableFilter<"Poll"> | string | null;
    settings?: Prisma.JsonNullableFilter<"Poll">;
    creatorId?: Prisma.StringFilter<"Poll"> | string;
    isPublic?: Prisma.BoolFilter<"Poll"> | boolean;
    isActive?: Prisma.BoolFilter<"Poll"> | boolean;
    closesAt?: Prisma.DateTimeNullableFilter<"Poll"> | Date | string | null;
    createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
    creator?: Prisma.XOR<
      Prisma.UserScalarRelationFilter,
      Prisma.UserWhereInput
    >;
    options?: Prisma.PollOptionListRelationFilter;
    votes?: Prisma.VoteListRelationFilter;
    likes?: Prisma.LikeListRelationFilter;
    comments?: Prisma.CommentListRelationFilter;
    views?: Prisma.PollViewListRelationFilter;
    notifications?: Prisma.NotificationListRelationFilter;
  },
  "id"
>;

export type PollOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  question?: Prisma.SortOrder;
  description?: Prisma.SortOrderInput | Prisma.SortOrder;
  settings?: Prisma.SortOrderInput | Prisma.SortOrder;
  creatorId?: Prisma.SortOrder;
  isPublic?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  closesAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  _count?: Prisma.PollCountOrderByAggregateInput;
  _max?: Prisma.PollMaxOrderByAggregateInput;
  _min?: Prisma.PollMinOrderByAggregateInput;
};

export type PollScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.PollScalarWhereWithAggregatesInput
    | Prisma.PollScalarWhereWithAggregatesInput[];
  OR?: Prisma.PollScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.PollScalarWhereWithAggregatesInput
    | Prisma.PollScalarWhereWithAggregatesInput[];
  id?: Prisma.StringWithAggregatesFilter<"Poll"> | string;
  question?: Prisma.StringWithAggregatesFilter<"Poll"> | string;
  description?:
    | Prisma.StringNullableWithAggregatesFilter<"Poll">
    | string
    | null;
  settings?: Prisma.JsonNullableWithAggregatesFilter<"Poll">;
  creatorId?: Prisma.StringWithAggregatesFilter<"Poll"> | string;
  isPublic?: Prisma.BoolWithAggregatesFilter<"Poll"> | boolean;
  isActive?: Prisma.BoolWithAggregatesFilter<"Poll"> | boolean;
  closesAt?:
    | Prisma.DateTimeNullableWithAggregatesFilter<"Poll">
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Poll"> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Poll"> | Date | string;
};

export type PollCreateInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateManyInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type PollUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PollUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type PollScalarRelationFilter = {
  is?: Prisma.PollWhereInput;
  isNot?: Prisma.PollWhereInput;
};

export type PollNullableScalarRelationFilter = {
  is?: Prisma.PollWhereInput | null;
  isNot?: Prisma.PollWhereInput | null;
};

export type PollCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  question?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  settings?: Prisma.SortOrder;
  creatorId?: Prisma.SortOrder;
  isPublic?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  closesAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type PollMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  question?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  creatorId?: Prisma.SortOrder;
  isPublic?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  closesAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type PollMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  question?: Prisma.SortOrder;
  description?: Prisma.SortOrder;
  creatorId?: Prisma.SortOrder;
  isPublic?: Prisma.SortOrder;
  isActive?: Prisma.SortOrder;
  closesAt?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
};

export type PollListRelationFilter = {
  every?: Prisma.PollWhereInput;
  some?: Prisma.PollWhereInput;
  none?: Prisma.PollWhereInput;
};

export type PollOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type PollCreateNestedOneWithoutCommentsInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutCommentsInput,
    Prisma.PollUncheckedCreateWithoutCommentsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCommentsInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneRequiredWithoutCommentsNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutCommentsInput,
    Prisma.PollUncheckedCreateWithoutCommentsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutCommentsInput;
  upsert?: Prisma.PollUpsertWithoutCommentsInput;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutCommentsInput,
      Prisma.PollUpdateWithoutCommentsInput
    >,
    Prisma.PollUncheckedUpdateWithoutCommentsInput
  >;
};

export type PollCreateNestedOneWithoutLikesInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutLikesInput,
    Prisma.PollUncheckedCreateWithoutLikesInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutLikesInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneRequiredWithoutLikesNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutLikesInput,
    Prisma.PollUncheckedCreateWithoutLikesInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutLikesInput;
  upsert?: Prisma.PollUpsertWithoutLikesInput;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutLikesInput,
      Prisma.PollUpdateWithoutLikesInput
    >,
    Prisma.PollUncheckedUpdateWithoutLikesInput
  >;
};

export type PollCreateNestedOneWithoutNotificationsInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutNotificationsInput,
    Prisma.PollUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutNotificationsInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneWithoutNotificationsNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutNotificationsInput,
    Prisma.PollUncheckedCreateWithoutNotificationsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutNotificationsInput;
  upsert?: Prisma.PollUpsertWithoutNotificationsInput;
  disconnect?: Prisma.PollWhereInput | boolean;
  delete?: Prisma.PollWhereInput | boolean;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutNotificationsInput,
      Prisma.PollUpdateWithoutNotificationsInput
    >,
    Prisma.PollUncheckedUpdateWithoutNotificationsInput
  >;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type PollCreateNestedOneWithoutOptionsInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutOptionsInput,
    Prisma.PollUncheckedCreateWithoutOptionsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutOptionsInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneRequiredWithoutOptionsNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutOptionsInput,
    Prisma.PollUncheckedCreateWithoutOptionsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutOptionsInput;
  upsert?: Prisma.PollUpsertWithoutOptionsInput;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutOptionsInput,
      Prisma.PollUpdateWithoutOptionsInput
    >,
    Prisma.PollUncheckedUpdateWithoutOptionsInput
  >;
};

export type PollCreateNestedOneWithoutViewsInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutViewsInput,
    Prisma.PollUncheckedCreateWithoutViewsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutViewsInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneWithoutViewsNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutViewsInput,
    Prisma.PollUncheckedCreateWithoutViewsInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutViewsInput;
  upsert?: Prisma.PollUpsertWithoutViewsInput;
  disconnect?: Prisma.PollWhereInput | boolean;
  delete?: Prisma.PollWhereInput | boolean;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutViewsInput,
      Prisma.PollUpdateWithoutViewsInput
    >,
    Prisma.PollUncheckedUpdateWithoutViewsInput
  >;
};

export type PollCreateNestedManyWithoutCreatorInput = {
  create?:
    | Prisma.XOR<
        Prisma.PollCreateWithoutCreatorInput,
        Prisma.PollUncheckedCreateWithoutCreatorInput
      >
    | Prisma.PollCreateWithoutCreatorInput[]
    | Prisma.PollUncheckedCreateWithoutCreatorInput[];
  connectOrCreate?:
    | Prisma.PollCreateOrConnectWithoutCreatorInput
    | Prisma.PollCreateOrConnectWithoutCreatorInput[];
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope;
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
};

export type PollUncheckedCreateNestedManyWithoutCreatorInput = {
  create?:
    | Prisma.XOR<
        Prisma.PollCreateWithoutCreatorInput,
        Prisma.PollUncheckedCreateWithoutCreatorInput
      >
    | Prisma.PollCreateWithoutCreatorInput[]
    | Prisma.PollUncheckedCreateWithoutCreatorInput[];
  connectOrCreate?:
    | Prisma.PollCreateOrConnectWithoutCreatorInput
    | Prisma.PollCreateOrConnectWithoutCreatorInput[];
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope;
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
};

export type PollUpdateManyWithoutCreatorNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PollCreateWithoutCreatorInput,
        Prisma.PollUncheckedCreateWithoutCreatorInput
      >
    | Prisma.PollCreateWithoutCreatorInput[]
    | Prisma.PollUncheckedCreateWithoutCreatorInput[];
  connectOrCreate?:
    | Prisma.PollCreateOrConnectWithoutCreatorInput
    | Prisma.PollCreateOrConnectWithoutCreatorInput[];
  upsert?:
    | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput
    | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput[];
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope;
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  update?:
    | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput
    | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput[];
  updateMany?:
    | Prisma.PollUpdateManyWithWhereWithoutCreatorInput
    | Prisma.PollUpdateManyWithWhereWithoutCreatorInput[];
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[];
};

export type PollUncheckedUpdateManyWithoutCreatorNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.PollCreateWithoutCreatorInput,
        Prisma.PollUncheckedCreateWithoutCreatorInput
      >
    | Prisma.PollCreateWithoutCreatorInput[]
    | Prisma.PollUncheckedCreateWithoutCreatorInput[];
  connectOrCreate?:
    | Prisma.PollCreateOrConnectWithoutCreatorInput
    | Prisma.PollCreateOrConnectWithoutCreatorInput[];
  upsert?:
    | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput
    | Prisma.PollUpsertWithWhereUniqueWithoutCreatorInput[];
  createMany?: Prisma.PollCreateManyCreatorInputEnvelope;
  set?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  disconnect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  delete?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  connect?: Prisma.PollWhereUniqueInput | Prisma.PollWhereUniqueInput[];
  update?:
    | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput
    | Prisma.PollUpdateWithWhereUniqueWithoutCreatorInput[];
  updateMany?:
    | Prisma.PollUpdateManyWithWhereWithoutCreatorInput
    | Prisma.PollUpdateManyWithWhereWithoutCreatorInput[];
  deleteMany?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[];
};

export type PollCreateNestedOneWithoutVotesInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutVotesInput,
    Prisma.PollUncheckedCreateWithoutVotesInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutVotesInput;
  connect?: Prisma.PollWhereUniqueInput;
};

export type PollUpdateOneRequiredWithoutVotesNestedInput = {
  create?: Prisma.XOR<
    Prisma.PollCreateWithoutVotesInput,
    Prisma.PollUncheckedCreateWithoutVotesInput
  >;
  connectOrCreate?: Prisma.PollCreateOrConnectWithoutVotesInput;
  upsert?: Prisma.PollUpsertWithoutVotesInput;
  connect?: Prisma.PollWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.PollUpdateToOneWithWhereWithoutVotesInput,
      Prisma.PollUpdateWithoutVotesInput
    >,
    Prisma.PollUncheckedUpdateWithoutVotesInput
  >;
};

export type PollCreateWithoutCommentsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutCommentsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutCommentsInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutCommentsInput,
    Prisma.PollUncheckedCreateWithoutCommentsInput
  >;
};

export type PollUpsertWithoutCommentsInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutCommentsInput,
    Prisma.PollUncheckedUpdateWithoutCommentsInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutCommentsInput,
    Prisma.PollUncheckedCreateWithoutCommentsInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutCommentsInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutCommentsInput,
    Prisma.PollUncheckedUpdateWithoutCommentsInput
  >;
};

export type PollUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutCommentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateWithoutLikesInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutLikesInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutLikesInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutLikesInput,
    Prisma.PollUncheckedCreateWithoutLikesInput
  >;
};

export type PollUpsertWithoutLikesInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutLikesInput,
    Prisma.PollUncheckedUpdateWithoutLikesInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutLikesInput,
    Prisma.PollUncheckedCreateWithoutLikesInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutLikesInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutLikesInput,
    Prisma.PollUncheckedUpdateWithoutLikesInput
  >;
};

export type PollUpdateWithoutLikesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutLikesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateWithoutNotificationsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutNotificationsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutNotificationsInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutNotificationsInput,
    Prisma.PollUncheckedCreateWithoutNotificationsInput
  >;
};

export type PollUpsertWithoutNotificationsInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutNotificationsInput,
    Prisma.PollUncheckedUpdateWithoutNotificationsInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutNotificationsInput,
    Prisma.PollUncheckedCreateWithoutNotificationsInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutNotificationsInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutNotificationsInput,
    Prisma.PollUncheckedUpdateWithoutNotificationsInput
  >;
};

export type PollUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutNotificationsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateWithoutOptionsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutOptionsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutOptionsInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutOptionsInput,
    Prisma.PollUncheckedCreateWithoutOptionsInput
  >;
};

export type PollUpsertWithoutOptionsInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutOptionsInput,
    Prisma.PollUncheckedUpdateWithoutOptionsInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutOptionsInput,
    Prisma.PollUncheckedCreateWithoutOptionsInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutOptionsInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutOptionsInput,
    Prisma.PollUncheckedUpdateWithoutOptionsInput
  >;
};

export type PollUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutOptionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateWithoutViewsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutViewsInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutViewsInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutViewsInput,
    Prisma.PollUncheckedCreateWithoutViewsInput
  >;
};

export type PollUpsertWithoutViewsInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutViewsInput,
    Prisma.PollUncheckedUpdateWithoutViewsInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutViewsInput,
    Prisma.PollUncheckedCreateWithoutViewsInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutViewsInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutViewsInput,
    Prisma.PollUncheckedUpdateWithoutViewsInput
  >;
};

export type PollUpdateWithoutViewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutViewsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateWithoutCreatorInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutCreatorInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  votes?: Prisma.VoteUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutCreatorInput,
    Prisma.PollUncheckedCreateWithoutCreatorInput
  >;
};

export type PollCreateManyCreatorInputEnvelope = {
  data: Prisma.PollCreateManyCreatorInput | Prisma.PollCreateManyCreatorInput[];
  skipDuplicates?: boolean;
};

export type PollUpsertWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutCreatorInput,
    Prisma.PollUncheckedUpdateWithoutCreatorInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutCreatorInput,
    Prisma.PollUncheckedCreateWithoutCreatorInput
  >;
};

export type PollUpdateWithWhereUniqueWithoutCreatorInput = {
  where: Prisma.PollWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutCreatorInput,
    Prisma.PollUncheckedUpdateWithoutCreatorInput
  >;
};

export type PollUpdateManyWithWhereWithoutCreatorInput = {
  where: Prisma.PollScalarWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateManyMutationInput,
    Prisma.PollUncheckedUpdateManyWithoutCreatorInput
  >;
};

export type PollScalarWhereInput = {
  AND?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[];
  OR?: Prisma.PollScalarWhereInput[];
  NOT?: Prisma.PollScalarWhereInput | Prisma.PollScalarWhereInput[];
  id?: Prisma.StringFilter<"Poll"> | string;
  question?: Prisma.StringFilter<"Poll"> | string;
  description?: Prisma.StringNullableFilter<"Poll"> | string | null;
  settings?: Prisma.JsonNullableFilter<"Poll">;
  creatorId?: Prisma.StringFilter<"Poll"> | string;
  isPublic?: Prisma.BoolFilter<"Poll"> | boolean;
  isActive?: Prisma.BoolFilter<"Poll"> | boolean;
  closesAt?: Prisma.DateTimeNullableFilter<"Poll"> | Date | string | null;
  createdAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<"Poll"> | Date | string;
};

export type PollCreateWithoutVotesInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  creator: Prisma.UserCreateNestedOneWithoutPollsInput;
  options?: Prisma.PollOptionCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationCreateNestedManyWithoutPollInput;
};

export type PollUncheckedCreateWithoutVotesInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId: string;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  options?: Prisma.PollOptionUncheckedCreateNestedManyWithoutPollInput;
  likes?: Prisma.LikeUncheckedCreateNestedManyWithoutPollInput;
  comments?: Prisma.CommentUncheckedCreateNestedManyWithoutPollInput;
  views?: Prisma.PollViewUncheckedCreateNestedManyWithoutPollInput;
  notifications?: Prisma.NotificationUncheckedCreateNestedManyWithoutPollInput;
};

export type PollCreateOrConnectWithoutVotesInput = {
  where: Prisma.PollWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutVotesInput,
    Prisma.PollUncheckedCreateWithoutVotesInput
  >;
};

export type PollUpsertWithoutVotesInput = {
  update: Prisma.XOR<
    Prisma.PollUpdateWithoutVotesInput,
    Prisma.PollUncheckedUpdateWithoutVotesInput
  >;
  create: Prisma.XOR<
    Prisma.PollCreateWithoutVotesInput,
    Prisma.PollUncheckedCreateWithoutVotesInput
  >;
  where?: Prisma.PollWhereInput;
};

export type PollUpdateToOneWithWhereWithoutVotesInput = {
  where?: Prisma.PollWhereInput;
  data: Prisma.XOR<
    Prisma.PollUpdateWithoutVotesInput,
    Prisma.PollUncheckedUpdateWithoutVotesInput
  >;
};

export type PollUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  creator?: Prisma.UserUpdateOneRequiredWithoutPollsNestedInput;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutVotesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  creatorId?: Prisma.StringFieldUpdateOperationsInput | string;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollCreateManyCreatorInput = {
  id?: string;
  question: string;
  description?: string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: Date | string | null;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type PollUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  options?: Prisma.PollOptionUncheckedUpdateManyWithoutPollNestedInput;
  votes?: Prisma.VoteUncheckedUpdateManyWithoutPollNestedInput;
  likes?: Prisma.LikeUncheckedUpdateManyWithoutPollNestedInput;
  comments?: Prisma.CommentUncheckedUpdateManyWithoutPollNestedInput;
  views?: Prisma.PollViewUncheckedUpdateManyWithoutPollNestedInput;
  notifications?: Prisma.NotificationUncheckedUpdateManyWithoutPollNestedInput;
};

export type PollUncheckedUpdateManyWithoutCreatorInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  question?: Prisma.StringFieldUpdateOperationsInput | string;
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  settings?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  isPublic?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  isActive?: Prisma.BoolFieldUpdateOperationsInput | boolean;
  closesAt?:
    | Prisma.NullableDateTimeFieldUpdateOperationsInput
    | Date
    | string
    | null;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type PollCountOutputType
 */

export type PollCountOutputType = {
  options: number;
  votes: number;
  likes: number;
  comments: number;
  views: number;
  notifications: number;
};

export type PollCountOutputTypeSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  options?: boolean | PollCountOutputTypeCountOptionsArgs;
  votes?: boolean | PollCountOutputTypeCountVotesArgs;
  likes?: boolean | PollCountOutputTypeCountLikesArgs;
  comments?: boolean | PollCountOutputTypeCountCommentsArgs;
  views?: boolean | PollCountOutputTypeCountViewsArgs;
  notifications?: boolean | PollCountOutputTypeCountNotificationsArgs;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PollCountOutputType
   */
  select?: Prisma.PollCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountOptionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PollOptionWhereInput;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountVotesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.VoteWhereInput;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountLikesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.LikeWhereInput;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountCommentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.CommentWhereInput;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountViewsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.PollViewWhereInput;
};

/**
 * PollCountOutputType without action
 */
export type PollCountOutputTypeCountNotificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.NotificationWhereInput;
};

export type PollSelect<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    question?: boolean;
    description?: boolean;
    settings?: boolean;
    creatorId?: boolean;
    isPublic?: boolean;
    isActive?: boolean;
    closesAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    options?: boolean | Prisma.Poll$optionsArgs<ExtArgs>;
    votes?: boolean | Prisma.Poll$votesArgs<ExtArgs>;
    likes?: boolean | Prisma.Poll$likesArgs<ExtArgs>;
    comments?: boolean | Prisma.Poll$commentsArgs<ExtArgs>;
    views?: boolean | Prisma.Poll$viewsArgs<ExtArgs>;
    notifications?: boolean | Prisma.Poll$notificationsArgs<ExtArgs>;
    _count?: boolean | Prisma.PollCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["poll"]
>;

export type PollSelectCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    question?: boolean;
    description?: boolean;
    settings?: boolean;
    creatorId?: boolean;
    isPublic?: boolean;
    isActive?: boolean;
    closesAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["poll"]
>;

export type PollSelectUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    question?: boolean;
    description?: boolean;
    settings?: boolean;
    creatorId?: boolean;
    isPublic?: boolean;
    isActive?: boolean;
    closesAt?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs["result"]["poll"]
>;

export type PollSelectScalar = {
  id?: boolean;
  question?: boolean;
  description?: boolean;
  settings?: boolean;
  creatorId?: boolean;
  isPublic?: boolean;
  isActive?: boolean;
  closesAt?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
};

export type PollOmit<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | "id"
  | "question"
  | "description"
  | "settings"
  | "creatorId"
  | "isPublic"
  | "isActive"
  | "closesAt"
  | "createdAt"
  | "updatedAt",
  ExtArgs["result"]["poll"]
>;
export type PollInclude<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  options?: boolean | Prisma.Poll$optionsArgs<ExtArgs>;
  votes?: boolean | Prisma.Poll$votesArgs<ExtArgs>;
  likes?: boolean | Prisma.Poll$likesArgs<ExtArgs>;
  comments?: boolean | Prisma.Poll$commentsArgs<ExtArgs>;
  views?: boolean | Prisma.Poll$viewsArgs<ExtArgs>;
  notifications?: boolean | Prisma.Poll$notificationsArgs<ExtArgs>;
  _count?: boolean | Prisma.PollCountOutputTypeDefaultArgs<ExtArgs>;
};
export type PollIncludeCreateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type PollIncludeUpdateManyAndReturn<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  creator?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $PollPayload<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: "Poll";
  objects: {
    creator: Prisma.$UserPayload<ExtArgs>;
    options: Prisma.$PollOptionPayload<ExtArgs>[];
    votes: Prisma.$VotePayload<ExtArgs>[];
    likes: Prisma.$LikePayload<ExtArgs>[];
    comments: Prisma.$CommentPayload<ExtArgs>[];
    views: Prisma.$PollViewPayload<ExtArgs>[];
    notifications: Prisma.$NotificationPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      question: string;
      description: string | null;
      settings: runtime.JsonValue | null;
      creatorId: string;
      isPublic: boolean;
      isActive: boolean;
      closesAt: Date | null;
      createdAt: Date;
      updatedAt: Date;
    },
    ExtArgs["result"]["poll"]
  >;
  composites: {};
};

export type PollGetPayload<
  S extends boolean | null | undefined | PollDefaultArgs,
> = runtime.Types.Result.GetResult<Prisma.$PollPayload, S>;

export type PollCountArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<PollFindManyArgs, "select" | "include" | "distinct" | "omit"> & {
  select?: PollCountAggregateInputType | true;
};

export interface PollDelegate<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: {
    types: Prisma.TypeMap<ExtArgs>["model"]["Poll"];
    meta: { name: "Poll" };
  };
  /**
   * Find zero or one Poll that matches the filter.
   * @param {PollFindUniqueArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PollFindUniqueArgs>(
    args: Prisma.SelectSubset<T, PollFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "findUnique",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Poll that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PollFindUniqueOrThrowArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PollFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, PollFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "findUniqueOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Poll that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindFirstArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PollFindFirstArgs>(
    args?: Prisma.SelectSubset<T, PollFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "findFirst",
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Poll that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindFirstOrThrowArgs} args - Arguments to find a Poll
   * @example
   * // Get one Poll
   * const poll = await prisma.poll.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PollFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, PollFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "findFirstOrThrow",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Polls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Polls
   * const polls = await prisma.poll.findMany()
   *
   * // Get first 10 Polls
   * const polls = await prisma.poll.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const pollWithIdOnly = await prisma.poll.findMany({ select: { id: true } })
   *
   */
  findMany<T extends PollFindManyArgs>(
    args?: Prisma.SelectSubset<T, PollFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "findMany",
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Poll.
   * @param {PollCreateArgs} args - Arguments to create a Poll.
   * @example
   * // Create one Poll
   * const Poll = await prisma.poll.create({
   *   data: {
   *     // ... data to create a Poll
   *   }
   * })
   *
   */
  create<T extends PollCreateArgs>(
    args: Prisma.SelectSubset<T, PollCreateArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "create",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Polls.
   * @param {PollCreateManyArgs} args - Arguments to create many Polls.
   * @example
   * // Create many Polls
   * const poll = await prisma.poll.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends PollCreateManyArgs>(
    args?: Prisma.SelectSubset<T, PollCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Polls and returns the data saved in the database.
   * @param {PollCreateManyAndReturnArgs} args - Arguments to create many Polls.
   * @example
   * // Create many Polls
   * const poll = await prisma.poll.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Polls and only return the `id`
   * const pollWithIdOnly = await prisma.poll.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends PollCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, PollCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "createManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Poll.
   * @param {PollDeleteArgs} args - Arguments to delete one Poll.
   * @example
   * // Delete one Poll
   * const Poll = await prisma.poll.delete({
   *   where: {
   *     // ... filter to delete one Poll
   *   }
   * })
   *
   */
  delete<T extends PollDeleteArgs>(
    args: Prisma.SelectSubset<T, PollDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "delete",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Poll.
   * @param {PollUpdateArgs} args - Arguments to update one Poll.
   * @example
   * // Update one Poll
   * const poll = await prisma.poll.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends PollUpdateArgs>(
    args: Prisma.SelectSubset<T, PollUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "update",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Polls.
   * @param {PollDeleteManyArgs} args - Arguments to filter Polls to delete.
   * @example
   * // Delete a few Polls
   * const { count } = await prisma.poll.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends PollDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, PollDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Polls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Polls
   * const poll = await prisma.poll.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends PollUpdateManyArgs>(
    args: Prisma.SelectSubset<T, PollUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Polls and returns the data updated in the database.
   * @param {PollUpdateManyAndReturnArgs} args - Arguments to update many Polls.
   * @example
   * // Update many Polls
   * const poll = await prisma.poll.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Polls and only return the `id`
   * const pollWithIdOnly = await prisma.poll.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends PollUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, PollUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "updateManyAndReturn",
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Poll.
   * @param {PollUpsertArgs} args - Arguments to update or create a Poll.
   * @example
   * // Update or create a Poll
   * const poll = await prisma.poll.upsert({
   *   create: {
   *     // ... data to create a Poll
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Poll we want to update
   *   }
   * })
   */
  upsert<T extends PollUpsertArgs>(
    args: Prisma.SelectSubset<T, PollUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__PollClient<
    runtime.Types.Result.GetResult<
      Prisma.$PollPayload<ExtArgs>,
      T,
      "upsert",
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Polls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollCountArgs} args - Arguments to filter Polls to count.
   * @example
   * // Count the number of Polls
   * const count = await prisma.poll.count({
   *   where: {
   *     // ... the filter for the Polls we want to count
   *   }
   * })
   **/
  count<T extends PollCountArgs>(
    args?: Prisma.Subset<T, PollCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<"select", any>
      ? T["select"] extends true
        ? number
        : Prisma.GetScalarType<T["select"], PollCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Poll.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends PollAggregateArgs>(
    args: Prisma.Subset<T, PollAggregateArgs>
  ): Prisma.PrismaPromise<GetPollAggregateType<T>>;

  /**
   * Group by Poll.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PollGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends PollGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<"skip", Prisma.Keys<T>>,
      Prisma.Extends<"take", Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PollGroupByArgs["orderBy"] }
      : { orderBy?: PollGroupByArgs["orderBy"] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T["orderBy"]>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T["by"]>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T["having"]>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T["by"] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [
                    Error,
                    "Field ",
                    P,
                    ` in "having" needs to be provided in "by"`,
                  ];
          }[HavingFields]
        : "take" extends Prisma.Keys<T>
          ? "orderBy" extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : "skip" extends Prisma.Keys<T>
            ? "orderBy" extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, PollGroupByArgs, OrderByArg> &
      InputErrors
  ): {} extends InputErrors
    ? GetPollGroupByPayload<T>
    : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Poll model
   */
  readonly fields: PollFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Poll.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PollClient<
  T,
  Null = never,
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise";
  creator<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        "findUniqueOrThrow",
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  options<T extends Prisma.Poll$optionsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$optionsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$PollOptionPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  votes<T extends Prisma.Poll$votesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$votesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$VotePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  likes<T extends Prisma.Poll$likesArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$likesArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$LikePayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  comments<T extends Prisma.Poll$commentsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$commentsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$CommentPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  views<T extends Prisma.Poll$viewsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$viewsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$PollViewPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  notifications<T extends Prisma.Poll$notificationsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Poll$notificationsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$NotificationPayload<ExtArgs>,
        T,
        "findMany",
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?:
      | ((value: T) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
    onrejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?:
      | ((reason: any) => TResult | PromiseLike<TResult>)
      | undefined
      | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(
    onfinally?: (() => void) | undefined | null
  ): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Poll model
 */
export interface PollFieldRefs {
  readonly id: Prisma.FieldRef<"Poll", "String">;
  readonly question: Prisma.FieldRef<"Poll", "String">;
  readonly description: Prisma.FieldRef<"Poll", "String">;
  readonly settings: Prisma.FieldRef<"Poll", "Json">;
  readonly creatorId: Prisma.FieldRef<"Poll", "String">;
  readonly isPublic: Prisma.FieldRef<"Poll", "Boolean">;
  readonly isActive: Prisma.FieldRef<"Poll", "Boolean">;
  readonly closesAt: Prisma.FieldRef<"Poll", "DateTime">;
  readonly createdAt: Prisma.FieldRef<"Poll", "DateTime">;
  readonly updatedAt: Prisma.FieldRef<"Poll", "DateTime">;
}

// Custom InputTypes
/**
 * Poll findUnique
 */
export type PollFindUniqueArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter, which Poll to fetch.
   */
  where: Prisma.PollWhereUniqueInput;
};

/**
 * Poll findUniqueOrThrow
 */
export type PollFindUniqueOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter, which Poll to fetch.
   */
  where: Prisma.PollWhereUniqueInput;
};

/**
 * Poll findFirst
 */
export type PollFindFirstArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter, which Poll to fetch.
   */
  where?: Prisma.PollWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Polls to fetch.
   */
  orderBy?:
    | Prisma.PollOrderByWithRelationInput
    | Prisma.PollOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Polls.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Polls.
   */
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[];
};

/**
 * Poll findFirstOrThrow
 */
export type PollFindFirstOrThrowArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter, which Poll to fetch.
   */
  where?: Prisma.PollWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Polls to fetch.
   */
  orderBy?:
    | Prisma.PollOrderByWithRelationInput
    | Prisma.PollOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Polls.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Polls.
   */
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[];
};

/**
 * Poll findMany
 */
export type PollFindManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter, which Polls to fetch.
   */
  where?: Prisma.PollWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Polls to fetch.
   */
  orderBy?:
    | Prisma.PollOrderByWithRelationInput
    | Prisma.PollOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Polls.
   */
  cursor?: Prisma.PollWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Polls from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Polls.
   */
  skip?: number;
  distinct?: Prisma.PollScalarFieldEnum | Prisma.PollScalarFieldEnum[];
};

/**
 * Poll create
 */
export type PollCreateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * The data needed to create a Poll.
   */
  data: Prisma.XOR<Prisma.PollCreateInput, Prisma.PollUncheckedCreateInput>;
};

/**
 * Poll createMany
 */
export type PollCreateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Polls.
   */
  data: Prisma.PollCreateManyInput | Prisma.PollCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Poll createManyAndReturn
 */
export type PollCreateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * The data used to create many Polls.
   */
  data: Prisma.PollCreateManyInput | Prisma.PollCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Poll update
 */
export type PollUpdateArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * The data needed to update a Poll.
   */
  data: Prisma.XOR<Prisma.PollUpdateInput, Prisma.PollUncheckedUpdateInput>;
  /**
   * Choose, which Poll to update.
   */
  where: Prisma.PollWhereUniqueInput;
};

/**
 * Poll updateMany
 */
export type PollUpdateManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Polls.
   */
  data: Prisma.XOR<
    Prisma.PollUpdateManyMutationInput,
    Prisma.PollUncheckedUpdateManyInput
  >;
  /**
   * Filter which Polls to update
   */
  where?: Prisma.PollWhereInput;
  /**
   * Limit how many Polls to update.
   */
  limit?: number;
};

/**
 * Poll updateManyAndReturn
 */
export type PollUpdateManyAndReturnArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * The data used to update Polls.
   */
  data: Prisma.XOR<
    Prisma.PollUpdateManyMutationInput,
    Prisma.PollUncheckedUpdateManyInput
  >;
  /**
   * Filter which Polls to update
   */
  where?: Prisma.PollWhereInput;
  /**
   * Limit how many Polls to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Poll upsert
 */
export type PollUpsertArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * The filter to search for the Poll to update in case it exists.
   */
  where: Prisma.PollWhereUniqueInput;
  /**
   * In case the Poll found by the `where` argument doesn't exist, create a new Poll with this data.
   */
  create: Prisma.XOR<Prisma.PollCreateInput, Prisma.PollUncheckedCreateInput>;
  /**
   * In case the Poll was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PollUpdateInput, Prisma.PollUncheckedUpdateInput>;
};

/**
 * Poll delete
 */
export type PollDeleteArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
  /**
   * Filter which Poll to delete.
   */
  where: Prisma.PollWhereUniqueInput;
};

/**
 * Poll deleteMany
 */
export type PollDeleteManyArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Polls to delete
   */
  where?: Prisma.PollWhereInput;
  /**
   * Limit how many Polls to delete.
   */
  limit?: number;
};

/**
 * Poll.options
 */
export type Poll$optionsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PollOption
   */
  select?: Prisma.PollOptionSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PollOption
   */
  omit?: Prisma.PollOptionOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollOptionInclude<ExtArgs> | null;
  where?: Prisma.PollOptionWhereInput;
  orderBy?:
    | Prisma.PollOptionOrderByWithRelationInput
    | Prisma.PollOptionOrderByWithRelationInput[];
  cursor?: Prisma.PollOptionWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.PollOptionScalarFieldEnum
    | Prisma.PollOptionScalarFieldEnum[];
};

/**
 * Poll.votes
 */
export type Poll$votesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null;
  where?: Prisma.VoteWhereInput;
  orderBy?:
    | Prisma.VoteOrderByWithRelationInput
    | Prisma.VoteOrderByWithRelationInput[];
  cursor?: Prisma.VoteWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[];
};

/**
 * Poll.likes
 */
export type Poll$likesArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Like
   */
  select?: Prisma.LikeSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Like
   */
  omit?: Prisma.LikeOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.LikeInclude<ExtArgs> | null;
  where?: Prisma.LikeWhereInput;
  orderBy?:
    | Prisma.LikeOrderByWithRelationInput
    | Prisma.LikeOrderByWithRelationInput[];
  cursor?: Prisma.LikeWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.LikeScalarFieldEnum | Prisma.LikeScalarFieldEnum[];
};

/**
 * Poll.comments
 */
export type Poll$commentsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Comment
   */
  select?: Prisma.CommentSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Comment
   */
  omit?: Prisma.CommentOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CommentInclude<ExtArgs> | null;
  where?: Prisma.CommentWhereInput;
  orderBy?:
    | Prisma.CommentOrderByWithRelationInput
    | Prisma.CommentOrderByWithRelationInput[];
  cursor?: Prisma.CommentWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.CommentScalarFieldEnum | Prisma.CommentScalarFieldEnum[];
};

/**
 * Poll.views
 */
export type Poll$viewsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the PollView
   */
  select?: Prisma.PollViewSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the PollView
   */
  omit?: Prisma.PollViewOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollViewInclude<ExtArgs> | null;
  where?: Prisma.PollViewWhereInput;
  orderBy?:
    | Prisma.PollViewOrderByWithRelationInput
    | Prisma.PollViewOrderByWithRelationInput[];
  cursor?: Prisma.PollViewWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.PollViewScalarFieldEnum | Prisma.PollViewScalarFieldEnum[];
};

/**
 * Poll.notifications
 */
export type Poll$notificationsArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Notification
   */
  select?: Prisma.NotificationSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Notification
   */
  omit?: Prisma.NotificationOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.NotificationInclude<ExtArgs> | null;
  where?: Prisma.NotificationWhereInput;
  orderBy?:
    | Prisma.NotificationOrderByWithRelationInput
    | Prisma.NotificationOrderByWithRelationInput[];
  cursor?: Prisma.NotificationWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?:
    | Prisma.NotificationScalarFieldEnum
    | Prisma.NotificationScalarFieldEnum[];
};

/**
 * Poll without action
 */
export type PollDefaultArgs<
  ExtArgs extends
    runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Poll
   */
  select?: Prisma.PollSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Poll
   */
  omit?: Prisma.PollOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PollInclude<ExtArgs> | null;
};
