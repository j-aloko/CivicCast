
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Vote` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Vote
 * 
 */
export type VoteModel = runtime.Types.Result.DefaultSelection<Prisma.$VotePayload>

export type AggregateVote = {
  _count: VoteCountAggregateOutputType | null
  _min: VoteMinAggregateOutputType | null
  _max: VoteMaxAggregateOutputType | null
}

export type VoteMinAggregateOutputType = {
  id: string | null
  pollId: string | null
  optionId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VoteMaxAggregateOutputType = {
  id: string | null
  pollId: string | null
  optionId: string | null
  userId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type VoteCountAggregateOutputType = {
  id: number
  pollId: number
  optionId: number
  userId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type VoteMinAggregateInputType = {
  id?: true
  pollId?: true
  optionId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type VoteMaxAggregateInputType = {
  id?: true
  pollId?: true
  optionId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
}

export type VoteCountAggregateInputType = {
  id?: true
  pollId?: true
  optionId?: true
  userId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type VoteAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Vote to aggregate.
   */
  where?: Prisma.VoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Votes to fetch.
   */
  orderBy?: Prisma.VoteOrderByWithRelationInput | Prisma.VoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.VoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Votes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Votes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Votes
  **/
  _count?: true | VoteCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: VoteMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: VoteMaxAggregateInputType
}

export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
      [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateVote[P]>
    : Prisma.GetScalarType<T[P], AggregateVote[P]>
}




export type VoteGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.VoteWhereInput
  orderBy?: Prisma.VoteOrderByWithAggregationInput | Prisma.VoteOrderByWithAggregationInput[]
  by: Prisma.VoteScalarFieldEnum[] | Prisma.VoteScalarFieldEnum
  having?: Prisma.VoteScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: VoteCountAggregateInputType | true
  _min?: VoteMinAggregateInputType
  _max?: VoteMaxAggregateInputType
}

export type VoteGroupByOutputType = {
  id: string
  pollId: string
  optionId: string
  userId: string
  createdAt: Date
  updatedAt: Date
  _count: VoteCountAggregateOutputType | null
  _min: VoteMinAggregateOutputType | null
  _max: VoteMaxAggregateOutputType | null
}

type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<VoteGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], VoteGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], VoteGroupByOutputType[P]>
      }
    >
  > 



export type VoteWhereInput = {
  AND?: Prisma.VoteWhereInput | Prisma.VoteWhereInput[]
  OR?: Prisma.VoteWhereInput[]
  NOT?: Prisma.VoteWhereInput | Prisma.VoteWhereInput[]
  id?: Prisma.StringFilter<"Vote"> | string
  pollId?: Prisma.StringFilter<"Vote"> | string
  optionId?: Prisma.StringFilter<"Vote"> | string
  userId?: Prisma.StringFilter<"Vote"> | string
  createdAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  option?: Prisma.XOR<Prisma.PollOptionScalarRelationFilter, Prisma.PollOptionWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type VoteOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  optionId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  poll?: Prisma.PollOrderByWithRelationInput
  option?: Prisma.PollOptionOrderByWithRelationInput
  user?: Prisma.UserOrderByWithRelationInput
}

export type VoteWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  pollId_userId?: Prisma.VotePollIdUserIdCompoundUniqueInput
  AND?: Prisma.VoteWhereInput | Prisma.VoteWhereInput[]
  OR?: Prisma.VoteWhereInput[]
  NOT?: Prisma.VoteWhereInput | Prisma.VoteWhereInput[]
  pollId?: Prisma.StringFilter<"Vote"> | string
  optionId?: Prisma.StringFilter<"Vote"> | string
  userId?: Prisma.StringFilter<"Vote"> | string
  createdAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
  poll?: Prisma.XOR<Prisma.PollScalarRelationFilter, Prisma.PollWhereInput>
  option?: Prisma.XOR<Prisma.PollOptionScalarRelationFilter, Prisma.PollOptionWhereInput>
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id" | "pollId_userId">

export type VoteOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  optionId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.VoteCountOrderByAggregateInput
  _max?: Prisma.VoteMaxOrderByAggregateInput
  _min?: Prisma.VoteMinOrderByAggregateInput
}

export type VoteScalarWhereWithAggregatesInput = {
  AND?: Prisma.VoteScalarWhereWithAggregatesInput | Prisma.VoteScalarWhereWithAggregatesInput[]
  OR?: Prisma.VoteScalarWhereWithAggregatesInput[]
  NOT?: Prisma.VoteScalarWhereWithAggregatesInput | Prisma.VoteScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Vote"> | string
  pollId?: Prisma.StringWithAggregatesFilter<"Vote"> | string
  optionId?: Prisma.StringWithAggregatesFilter<"Vote"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Vote"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Vote"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Vote"> | Date | string
}

export type VoteCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  poll: Prisma.PollCreateNestedOneWithoutVotesInput
  option: Prisma.PollOptionCreateNestedOneWithoutVotesInput
  user: Prisma.UserCreateNestedOneWithoutVotesInput
}

export type VoteUncheckedCreateInput = {
  id?: string
  pollId: string
  optionId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneRequiredWithoutVotesNestedInput
  option?: Prisma.PollOptionUpdateOneRequiredWithoutVotesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutVotesNestedInput
}

export type VoteUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteCreateManyInput = {
  id?: string
  pollId: string
  optionId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteListRelationFilter = {
  every?: Prisma.VoteWhereInput
  some?: Prisma.VoteWhereInput
  none?: Prisma.VoteWhereInput
}

export type VoteOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type VotePollIdUserIdCompoundUniqueInput = {
  pollId: string
  userId: string
}

export type VoteCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  optionId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VoteMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  optionId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VoteMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  pollId?: Prisma.SortOrder
  optionId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type VoteCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput> | Prisma.VoteCreateWithoutPollInput[] | Prisma.VoteUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutPollInput | Prisma.VoteCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.VoteCreateManyPollInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUncheckedCreateNestedManyWithoutPollInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput> | Prisma.VoteCreateWithoutPollInput[] | Prisma.VoteUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutPollInput | Prisma.VoteCreateOrConnectWithoutPollInput[]
  createMany?: Prisma.VoteCreateManyPollInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput> | Prisma.VoteCreateWithoutPollInput[] | Prisma.VoteUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutPollInput | Prisma.VoteCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutPollInput | Prisma.VoteUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.VoteCreateManyPollInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutPollInput | Prisma.VoteUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutPollInput | Prisma.VoteUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteUncheckedUpdateManyWithoutPollNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput> | Prisma.VoteCreateWithoutPollInput[] | Prisma.VoteUncheckedCreateWithoutPollInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutPollInput | Prisma.VoteCreateOrConnectWithoutPollInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutPollInput | Prisma.VoteUpsertWithWhereUniqueWithoutPollInput[]
  createMany?: Prisma.VoteCreateManyPollInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutPollInput | Prisma.VoteUpdateWithWhereUniqueWithoutPollInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutPollInput | Prisma.VoteUpdateManyWithWhereWithoutPollInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteCreateNestedManyWithoutOptionInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput> | Prisma.VoteCreateWithoutOptionInput[] | Prisma.VoteUncheckedCreateWithoutOptionInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutOptionInput | Prisma.VoteCreateOrConnectWithoutOptionInput[]
  createMany?: Prisma.VoteCreateManyOptionInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUncheckedCreateNestedManyWithoutOptionInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput> | Prisma.VoteCreateWithoutOptionInput[] | Prisma.VoteUncheckedCreateWithoutOptionInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutOptionInput | Prisma.VoteCreateOrConnectWithoutOptionInput[]
  createMany?: Prisma.VoteCreateManyOptionInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUpdateManyWithoutOptionNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput> | Prisma.VoteCreateWithoutOptionInput[] | Prisma.VoteUncheckedCreateWithoutOptionInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutOptionInput | Prisma.VoteCreateOrConnectWithoutOptionInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutOptionInput | Prisma.VoteUpsertWithWhereUniqueWithoutOptionInput[]
  createMany?: Prisma.VoteCreateManyOptionInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutOptionInput | Prisma.VoteUpdateWithWhereUniqueWithoutOptionInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutOptionInput | Prisma.VoteUpdateManyWithWhereWithoutOptionInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteUncheckedUpdateManyWithoutOptionNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput> | Prisma.VoteCreateWithoutOptionInput[] | Prisma.VoteUncheckedCreateWithoutOptionInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutOptionInput | Prisma.VoteCreateOrConnectWithoutOptionInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutOptionInput | Prisma.VoteUpsertWithWhereUniqueWithoutOptionInput[]
  createMany?: Prisma.VoteCreateManyOptionInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutOptionInput | Prisma.VoteUpdateWithWhereUniqueWithoutOptionInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutOptionInput | Prisma.VoteUpdateManyWithWhereWithoutOptionInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput> | Prisma.VoteCreateWithoutUserInput[] | Prisma.VoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutUserInput | Prisma.VoteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.VoteCreateManyUserInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput> | Prisma.VoteCreateWithoutUserInput[] | Prisma.VoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutUserInput | Prisma.VoteCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.VoteCreateManyUserInputEnvelope
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
}

export type VoteUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput> | Prisma.VoteCreateWithoutUserInput[] | Prisma.VoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutUserInput | Prisma.VoteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutUserInput | Prisma.VoteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.VoteCreateManyUserInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutUserInput | Prisma.VoteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutUserInput | Prisma.VoteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput> | Prisma.VoteCreateWithoutUserInput[] | Prisma.VoteUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.VoteCreateOrConnectWithoutUserInput | Prisma.VoteCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.VoteUpsertWithWhereUniqueWithoutUserInput | Prisma.VoteUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.VoteCreateManyUserInputEnvelope
  set?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  disconnect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  delete?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  connect?: Prisma.VoteWhereUniqueInput | Prisma.VoteWhereUniqueInput[]
  update?: Prisma.VoteUpdateWithWhereUniqueWithoutUserInput | Prisma.VoteUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.VoteUpdateManyWithWhereWithoutUserInput | Prisma.VoteUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
}

export type VoteCreateWithoutPollInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  option: Prisma.PollOptionCreateNestedOneWithoutVotesInput
  user: Prisma.UserCreateNestedOneWithoutVotesInput
}

export type VoteUncheckedCreateWithoutPollInput = {
  id?: string
  optionId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteCreateOrConnectWithoutPollInput = {
  where: Prisma.VoteWhereUniqueInput
  create: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput>
}

export type VoteCreateManyPollInputEnvelope = {
  data: Prisma.VoteCreateManyPollInput | Prisma.VoteCreateManyPollInput[]
  skipDuplicates?: boolean
}

export type VoteUpsertWithWhereUniqueWithoutPollInput = {
  where: Prisma.VoteWhereUniqueInput
  update: Prisma.XOR<Prisma.VoteUpdateWithoutPollInput, Prisma.VoteUncheckedUpdateWithoutPollInput>
  create: Prisma.XOR<Prisma.VoteCreateWithoutPollInput, Prisma.VoteUncheckedCreateWithoutPollInput>
}

export type VoteUpdateWithWhereUniqueWithoutPollInput = {
  where: Prisma.VoteWhereUniqueInput
  data: Prisma.XOR<Prisma.VoteUpdateWithoutPollInput, Prisma.VoteUncheckedUpdateWithoutPollInput>
}

export type VoteUpdateManyWithWhereWithoutPollInput = {
  where: Prisma.VoteScalarWhereInput
  data: Prisma.XOR<Prisma.VoteUpdateManyMutationInput, Prisma.VoteUncheckedUpdateManyWithoutPollInput>
}

export type VoteScalarWhereInput = {
  AND?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
  OR?: Prisma.VoteScalarWhereInput[]
  NOT?: Prisma.VoteScalarWhereInput | Prisma.VoteScalarWhereInput[]
  id?: Prisma.StringFilter<"Vote"> | string
  pollId?: Prisma.StringFilter<"Vote"> | string
  optionId?: Prisma.StringFilter<"Vote"> | string
  userId?: Prisma.StringFilter<"Vote"> | string
  createdAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Vote"> | Date | string
}

export type VoteCreateWithoutOptionInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  poll: Prisma.PollCreateNestedOneWithoutVotesInput
  user: Prisma.UserCreateNestedOneWithoutVotesInput
}

export type VoteUncheckedCreateWithoutOptionInput = {
  id?: string
  pollId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteCreateOrConnectWithoutOptionInput = {
  where: Prisma.VoteWhereUniqueInput
  create: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput>
}

export type VoteCreateManyOptionInputEnvelope = {
  data: Prisma.VoteCreateManyOptionInput | Prisma.VoteCreateManyOptionInput[]
  skipDuplicates?: boolean
}

export type VoteUpsertWithWhereUniqueWithoutOptionInput = {
  where: Prisma.VoteWhereUniqueInput
  update: Prisma.XOR<Prisma.VoteUpdateWithoutOptionInput, Prisma.VoteUncheckedUpdateWithoutOptionInput>
  create: Prisma.XOR<Prisma.VoteCreateWithoutOptionInput, Prisma.VoteUncheckedCreateWithoutOptionInput>
}

export type VoteUpdateWithWhereUniqueWithoutOptionInput = {
  where: Prisma.VoteWhereUniqueInput
  data: Prisma.XOR<Prisma.VoteUpdateWithoutOptionInput, Prisma.VoteUncheckedUpdateWithoutOptionInput>
}

export type VoteUpdateManyWithWhereWithoutOptionInput = {
  where: Prisma.VoteScalarWhereInput
  data: Prisma.XOR<Prisma.VoteUpdateManyMutationInput, Prisma.VoteUncheckedUpdateManyWithoutOptionInput>
}

export type VoteCreateWithoutUserInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  poll: Prisma.PollCreateNestedOneWithoutVotesInput
  option: Prisma.PollOptionCreateNestedOneWithoutVotesInput
}

export type VoteUncheckedCreateWithoutUserInput = {
  id?: string
  pollId: string
  optionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteCreateOrConnectWithoutUserInput = {
  where: Prisma.VoteWhereUniqueInput
  create: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput>
}

export type VoteCreateManyUserInputEnvelope = {
  data: Prisma.VoteCreateManyUserInput | Prisma.VoteCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type VoteUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.VoteWhereUniqueInput
  update: Prisma.XOR<Prisma.VoteUpdateWithoutUserInput, Prisma.VoteUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.VoteCreateWithoutUserInput, Prisma.VoteUncheckedCreateWithoutUserInput>
}

export type VoteUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.VoteWhereUniqueInput
  data: Prisma.XOR<Prisma.VoteUpdateWithoutUserInput, Prisma.VoteUncheckedUpdateWithoutUserInput>
}

export type VoteUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.VoteScalarWhereInput
  data: Prisma.XOR<Prisma.VoteUpdateManyMutationInput, Prisma.VoteUncheckedUpdateManyWithoutUserInput>
}

export type VoteCreateManyPollInput = {
  id?: string
  optionId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  option?: Prisma.PollOptionUpdateOneRequiredWithoutVotesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutVotesNestedInput
}

export type VoteUncheckedUpdateWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteUncheckedUpdateManyWithoutPollInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteCreateManyOptionInput = {
  id?: string
  pollId: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteUpdateWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneRequiredWithoutVotesNestedInput
  user?: Prisma.UserUpdateOneRequiredWithoutVotesNestedInput
}

export type VoteUncheckedUpdateWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteUncheckedUpdateManyWithoutOptionInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteCreateManyUserInput = {
  id?: string
  pollId: string
  optionId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type VoteUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  poll?: Prisma.PollUpdateOneRequiredWithoutVotesNestedInput
  option?: Prisma.PollOptionUpdateOneRequiredWithoutVotesNestedInput
}

export type VoteUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type VoteUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  pollId?: Prisma.StringFieldUpdateOperationsInput | string
  optionId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type VoteSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  optionId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vote"]>

export type VoteSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  optionId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vote"]>

export type VoteSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  pollId?: boolean
  optionId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["vote"]>

export type VoteSelectScalar = {
  id?: boolean
  pollId?: boolean
  optionId?: boolean
  userId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type VoteOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "pollId" | "optionId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["vote"]>
export type VoteInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type VoteIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type VoteIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  poll?: boolean | Prisma.PollDefaultArgs<ExtArgs>
  option?: boolean | Prisma.PollOptionDefaultArgs<ExtArgs>
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $VotePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Vote"
  objects: {
    poll: Prisma.$PollPayload<ExtArgs>
    option: Prisma.$PollOptionPayload<ExtArgs>
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    pollId: string
    optionId: string
    userId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["vote"]>
  composites: {}
}

export type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$VotePayload, S>

export type VoteCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: VoteCountAggregateInputType | true
  }

export interface VoteDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
  /**
   * Find zero or one Vote that matches the filter.
   * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
   * @example
   * // Get one Vote
   * const vote = await prisma.vote.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends VoteFindUniqueArgs>(args: Prisma.SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Vote that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
   * @example
   * // Get one Vote
   * const vote = await prisma.vote.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vote that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteFindFirstArgs} args - Arguments to find a Vote
   * @example
   * // Get one Vote
   * const vote = await prisma.vote.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends VoteFindFirstArgs>(args?: Prisma.SelectSubset<T, VoteFindFirstArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Vote that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
   * @example
   * // Get one Vote
   * const vote = await prisma.vote.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Votes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Votes
   * const votes = await prisma.vote.findMany()
   * 
   * // Get first 10 Votes
   * const votes = await prisma.vote.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends VoteFindManyArgs>(args?: Prisma.SelectSubset<T, VoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Vote.
   * @param {VoteCreateArgs} args - Arguments to create a Vote.
   * @example
   * // Create one Vote
   * const Vote = await prisma.vote.create({
   *   data: {
   *     // ... data to create a Vote
   *   }
   * })
   * 
   */
  create<T extends VoteCreateArgs>(args: Prisma.SelectSubset<T, VoteCreateArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Votes.
   * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
   * @example
   * // Create many Votes
   * const vote = await prisma.vote.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends VoteCreateManyArgs>(args?: Prisma.SelectSubset<T, VoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Votes and returns the data saved in the database.
   * @param {VoteCreateManyAndReturnArgs} args - Arguments to create many Votes.
   * @example
   * // Create many Votes
   * const vote = await prisma.vote.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Votes and only return the `id`
   * const voteWithIdOnly = await prisma.vote.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends VoteCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, VoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Vote.
   * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
   * @example
   * // Delete one Vote
   * const Vote = await prisma.vote.delete({
   *   where: {
   *     // ... filter to delete one Vote
   *   }
   * })
   * 
   */
  delete<T extends VoteDeleteArgs>(args: Prisma.SelectSubset<T, VoteDeleteArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Vote.
   * @param {VoteUpdateArgs} args - Arguments to update one Vote.
   * @example
   * // Update one Vote
   * const vote = await prisma.vote.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends VoteUpdateArgs>(args: Prisma.SelectSubset<T, VoteUpdateArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Votes.
   * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
   * @example
   * // Delete a few Votes
   * const { count } = await prisma.vote.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends VoteDeleteManyArgs>(args?: Prisma.SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Votes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Votes
   * const vote = await prisma.vote.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends VoteUpdateManyArgs>(args: Prisma.SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Votes and returns the data updated in the database.
   * @param {VoteUpdateManyAndReturnArgs} args - Arguments to update many Votes.
   * @example
   * // Update many Votes
   * const vote = await prisma.vote.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Votes and only return the `id`
   * const voteWithIdOnly = await prisma.vote.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends VoteUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, VoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Vote.
   * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
   * @example
   * // Update or create a Vote
   * const vote = await prisma.vote.upsert({
   *   create: {
   *     // ... data to create a Vote
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Vote we want to update
   *   }
   * })
   */
  upsert<T extends VoteUpsertArgs>(args: Prisma.SelectSubset<T, VoteUpsertArgs<ExtArgs>>): Prisma.Prisma__VoteClient<runtime.Types.Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Votes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteCountArgs} args - Arguments to filter Votes to count.
   * @example
   * // Count the number of Votes
   * const count = await prisma.vote.count({
   *   where: {
   *     // ... the filter for the Votes we want to count
   *   }
   * })
  **/
  count<T extends VoteCountArgs>(
    args?: Prisma.Subset<T, VoteCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], VoteCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Vote.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends VoteAggregateArgs>(args: Prisma.Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

  /**
   * Group by Vote.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {VoteGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends VoteGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: VoteGroupByArgs['orderBy'] }
      : { orderBy?: VoteGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Vote model
 */
readonly fields: VoteFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Vote.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__VoteClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  poll<T extends Prisma.PollDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollDefaultArgs<ExtArgs>>): Prisma.Prisma__PollClient<runtime.Types.Result.GetResult<Prisma.$PollPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  option<T extends Prisma.PollOptionDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PollOptionDefaultArgs<ExtArgs>>): Prisma.Prisma__PollOptionClient<runtime.Types.Result.GetResult<Prisma.$PollOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Vote model
 */
export interface VoteFieldRefs {
  readonly id: Prisma.FieldRef<"Vote", 'String'>
  readonly pollId: Prisma.FieldRef<"Vote", 'String'>
  readonly optionId: Prisma.FieldRef<"Vote", 'String'>
  readonly userId: Prisma.FieldRef<"Vote", 'String'>
  readonly createdAt: Prisma.FieldRef<"Vote", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Vote", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Vote findUnique
 */
export type VoteFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter, which Vote to fetch.
   */
  where: Prisma.VoteWhereUniqueInput
}

/**
 * Vote findUniqueOrThrow
 */
export type VoteFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter, which Vote to fetch.
   */
  where: Prisma.VoteWhereUniqueInput
}

/**
 * Vote findFirst
 */
export type VoteFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter, which Vote to fetch.
   */
  where?: Prisma.VoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Votes to fetch.
   */
  orderBy?: Prisma.VoteOrderByWithRelationInput | Prisma.VoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Votes.
   */
  cursor?: Prisma.VoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Votes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Votes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Votes.
   */
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[]
}

/**
 * Vote findFirstOrThrow
 */
export type VoteFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter, which Vote to fetch.
   */
  where?: Prisma.VoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Votes to fetch.
   */
  orderBy?: Prisma.VoteOrderByWithRelationInput | Prisma.VoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Votes.
   */
  cursor?: Prisma.VoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Votes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Votes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Votes.
   */
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[]
}

/**
 * Vote findMany
 */
export type VoteFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter, which Votes to fetch.
   */
  where?: Prisma.VoteWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Votes to fetch.
   */
  orderBy?: Prisma.VoteOrderByWithRelationInput | Prisma.VoteOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Votes.
   */
  cursor?: Prisma.VoteWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Votes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Votes.
   */
  skip?: number
  distinct?: Prisma.VoteScalarFieldEnum | Prisma.VoteScalarFieldEnum[]
}

/**
 * Vote create
 */
export type VoteCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * The data needed to create a Vote.
   */
  data: Prisma.XOR<Prisma.VoteCreateInput, Prisma.VoteUncheckedCreateInput>
}

/**
 * Vote createMany
 */
export type VoteCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Votes.
   */
  data: Prisma.VoteCreateManyInput | Prisma.VoteCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Vote createManyAndReturn
 */
export type VoteCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * The data used to create many Votes.
   */
  data: Prisma.VoteCreateManyInput | Prisma.VoteCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Vote update
 */
export type VoteUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * The data needed to update a Vote.
   */
  data: Prisma.XOR<Prisma.VoteUpdateInput, Prisma.VoteUncheckedUpdateInput>
  /**
   * Choose, which Vote to update.
   */
  where: Prisma.VoteWhereUniqueInput
}

/**
 * Vote updateMany
 */
export type VoteUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Votes.
   */
  data: Prisma.XOR<Prisma.VoteUpdateManyMutationInput, Prisma.VoteUncheckedUpdateManyInput>
  /**
   * Filter which Votes to update
   */
  where?: Prisma.VoteWhereInput
  /**
   * Limit how many Votes to update.
   */
  limit?: number
}

/**
 * Vote updateManyAndReturn
 */
export type VoteUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * The data used to update Votes.
   */
  data: Prisma.XOR<Prisma.VoteUpdateManyMutationInput, Prisma.VoteUncheckedUpdateManyInput>
  /**
   * Filter which Votes to update
   */
  where?: Prisma.VoteWhereInput
  /**
   * Limit how many Votes to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Vote upsert
 */
export type VoteUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * The filter to search for the Vote to update in case it exists.
   */
  where: Prisma.VoteWhereUniqueInput
  /**
   * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
   */
  create: Prisma.XOR<Prisma.VoteCreateInput, Prisma.VoteUncheckedCreateInput>
  /**
   * In case the Vote was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.VoteUpdateInput, Prisma.VoteUncheckedUpdateInput>
}

/**
 * Vote delete
 */
export type VoteDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
  /**
   * Filter which Vote to delete.
   */
  where: Prisma.VoteWhereUniqueInput
}

/**
 * Vote deleteMany
 */
export type VoteDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Votes to delete
   */
  where?: Prisma.VoteWhereInput
  /**
   * Limit how many Votes to delete.
   */
  limit?: number
}

/**
 * Vote without action
 */
export type VoteDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Vote
   */
  select?: Prisma.VoteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Vote
   */
  omit?: Prisma.VoteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.VoteInclude<ExtArgs> | null
}
